<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Todd&#39;s Thoughts</title>
    <link>https://blog.toddmeinershagen.com/post/</link>
    <description>Recent content in Posts on Todd&#39;s Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 10 Mar 2017 18:13:30 -0600</lastBuildDate>
    
	<atom:link href="https://blog.toddmeinershagen.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Live Unit Testing in Visual Studio 2017</title>
      <link>https://blog.toddmeinershagen.com/post/2017/03/10/live-unit-testing-in-visual-studio-2017/</link>
      <pubDate>Fri, 10 Mar 2017 18:13:30 -0600</pubDate>
      
      <guid>https://blog.toddmeinershagen.com/post/2017/03/10/live-unit-testing-in-visual-studio-2017/</guid>
      <description>I am a big proponent of unit testing my code because of the many benefits it provides:
 Helps me to catch potential bugs early Helps me to clarify the behavior of my units (classes) from a client perspective Leaves a documentation trail for those that come behind me to understand my intentions  The only irritation/friction I have found in the past is the fact that running unit tests has required me to manually run them on a periodic basis.</description>
    </item>
    
    <item>
      <title>Type-Safe Enum Strings in .NET</title>
      <link>https://blog.toddmeinershagen.com/post/2008/08/18/type-safe-enum-strings-in-dotnet/</link>
      <pubDate>Fri, 10 Mar 2017 18:13:30 -0600</pubDate>
      
      <guid>https://blog.toddmeinershagen.com/post/2008/08/18/type-safe-enum-strings-in-dotnet/</guid>
      <description>One thing that has always bothered me in .NET is the inability to create a type-safe set of string constants like an enum. I would like to create a type such as the following:
public enum StoredProcedure : string { DeleteConsumer = &amp;quot;DeleteConsumer&amp;quot;, EditConsumer = &amp;quot;EditConsumer&amp;quot;, GetConsumer = &amp;quot;GetConsumer&amp;quot; }  This would be incredibly useful for those situations where you are passing constant strings to a given method and you would like to limit the options that are passed to a finite set of options that can be detected through a type-safe check during compile time.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.toddmeinershagen.com/post/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.toddmeinershagen.com/post/template/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>