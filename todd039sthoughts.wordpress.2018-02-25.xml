<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2018-02-25 03:49"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Todd's Thoughts</title>
<link>https://toddmeinershagen.wordpress.com</link>
<description>Random access to my thoughts, ideas, and experiences...</description>
<pubDate>Sun, 25 Feb 2018 03:49:44 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://toddmeinershagen.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>tmeinershagen</wp:author_login>
  <wp:author_email>todd@meinershagen.net</wp:author_email>
  <wp:author_display_name><![CDATA[Todd Meinershagen]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Todd&#039;s Thoughts</title>
		<link>https://toddmeinershagen.wordpress.com</link>
	</image>
	<item>
  <title>Decision to Reject a Counter Offer</title>
  <link>https://toddmeinershagen.wordpress.com/?p=3</link>
  <pubDate>Sun, 10 Aug 2008 22:40:03 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.wordpress.com/2008/08/10/decision-to-reject-a-counter-offer/</guid>
  <description/>
  <content:encoded><![CDATA[<div class="Section1"> <p class="MsoNormal">So – I have decided to leave my company of 4 ½ years.&nbsp; It was a difficult decision, as any decision is to leave your company is.&nbsp; I really have enjoyed working with the various teams that I have been involved with.&nbsp; The main driving force was a greater need to connect with people locally.&nbsp; I currently work out of a remote office in Dallas, with the rest of my team being in Chicago, but I enjoy the atmosphere of working with a local team and being able to informally discuss issues and connect at a more personal level.</p> <p class="MsoNormal">The problem – I submit my resignation, and <span style="color:#1f497d;">within a day</span>, I receive a counter offer.&nbsp; I won’t go into the specifics of what they offered me, but suffice it to say that I began to wonder if it wouldn’t be worth my while to stay for another year or two.&nbsp; </p> <p class="MsoNormal">I write this post to explain to others and remind myself of why I decided to stick with my decision to leave my current employer.</p> <p class="MsoNormal">1.&nbsp; It’s all a mirage.</p> <p class="MsoListParagraph">The offer from my current employer only really existed the moment that I put my resignation in.&nbsp; Therefore, it’s really just an illusion.&nbsp; I can’t rationalize or try to get myself to believe that these two options were going to exist at the time of my initial decision.&nbsp; It was flattering, though. </p> <p class="MsoListParagraph">2.&nbsp; Potential Problems</p> <p class="MsoListParagraph">I did all of the online research I could to see if accepting a counter offer was legitimate.&nbsp; Most information that I gathered suggested that it would not be a good idea, because 99% of the time the employee is gone within 6-12 months either because the original issue was not addressed by the counter offer or the employer replaced the person since they were disloyal.&nbsp; And most posts mentioned that it was an unethical move.</p> <p class="MsoListParagraph">3.&nbsp; <span><span>&nbsp;</span></span>Integrity is at issue.</p> <p class="MsoListParagraph">The moment that I began to entertain accepting the counter offer, I began to feel wrong inside.&nbsp; Although I agreed with all of the information I found online, that wasn’t what was really eating at me.&nbsp; I felt that I was wronging the company that I had said, “yes,” to.&nbsp; They would have to start their search all over again.&nbsp; That didn’t feel right.&nbsp; I couldn’t face myself in the mirror if I felt that I had done something to hurt someone.</p> <p class="MsoListParagraph">4.&nbsp; <span><span>&nbsp;</span></span>Spiritual</p> <p class="MsoNormal">And finally, as I lay in bed at night, I found myself crying out to God to give me wisdom.&nbsp; I wanted to make sure that whatever I chose to do, it was what the Lord thought was right.&nbsp; And at 2:00 am in the morning, the day before I rejected the counter offer, a verse came to my mind that I had not read for over 6 months:&nbsp; “Who swears to his own hurt, and does not change…”&nbsp; This is part of a larger passage of scripture in Psalms chapter 15, where King David asks “O <span class="small-caps">Lord</span>, who shall sojourn in your tent?&nbsp; Who shall dwell on your holy hill?”&nbsp; And the list that follows explains the qualities of one who can fellowship with the Lord.&nbsp; And keeping promises must be high on His list.&nbsp; </p> <p class="MsoNormal">I couldn’t deny the voice of God.&nbsp; Accepting a counter offer was wrong not only because it isn’t real, it might potentially cause me harm, and it might damage my reputation with others.&nbsp; It might also cause harm to my neighbor – or in this case, my future employer.&nbsp; I couldn’t do that with a good conscience.&nbsp; It would keep me from fellowshipping with the One whom I don’t want to miss out on.</p></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2008-08-10 22:40:03</wp:post_date>
  <wp:post_date_gmt>2008-08-10 22:40:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>decision-to-reject-a-counter-offer</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718621]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>New SiteAvailabilityHttpModule - Based on Client IP Address</title>
  <link>https://toddmeinershagen.wordpress.com/?p=4</link>
  <pubDate>Sun, 10 Aug 2008 22:41:44 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.wordpress.com/2008/08/10/new-siteavailabilityhttpmodule-based-on-client-ip-address/</guid>
  <description/>
  <content:encoded><![CDATA[<div class="Section1"> <p class="MsoNormal">As part of my company’s Technical Council, we are working on defining our process for promoting code from one environment to the next.&nbsp; One of the items we wanted to standardize across our enterprise was how we stop a site during a promotion.&nbsp; </p> <p class="MsoNormal">ASP.NET 2.0 has a nice feature for shutting down a site called App Offline.&nbsp; As Scott Guthrie from Microsoft puts it, “the way [App Offline] works is that you place this file in the root of the application.&nbsp; When ASP.NET sees it, it will shut-down the app-domain for the application (and not restart it for requests) and instead send back the contents of the app_offline.htm file in response to all new dynamic requests for the application.&nbsp; When you are done updating the site, just delete the file and it will come back online.”&nbsp; You can find more out about this technique from the original blog entry <a href="http://weblogs.asp.net/scottgu/archive/2006/04/09/442332.aspx">here</a>.</p> <p class="MsoNormal">Unfortunately, our requirements were a bit more complicated than was intended with the app_offline.htm.&nbsp; First, most of our applications were written with the 1.1 framework, so this built-in functionality was not available for our use.&nbsp; In addition, we wanted the ability for testers to be able to validate the site once the changes had been made.&nbsp; However, we didn’t want to have to bring the site back up in order to do that.</p> <p class="MsoNormal">As I was looking on line, I found another option called the <a href="http://www.jameskovacs.com/blog/InDepthLookAtTheSiteAvailabilityModule.aspx">SiteAvailabilityHttpModule</a>.&nbsp; This module allowed for the site to be shut down by merely configuring an HttpModule within the web.config.&nbsp; In the Init() event, the module subscribes to the PostAuthorizeRequest event.&nbsp; Within the event handler, the system determines whether or not the request occurred during an accepted time frame and whether or not the requesting user belonged to the administrator role.&nbsp; </p> <p class="MsoNormal">We didn’t need either of those features for our deployment.&nbsp; Instead of using a role-based mechanism for determining a user’s access, we wanted to base access on a configured list of client IP addresses.&nbsp; As a result, we didn’t need to wait until the PostAuthorizeRequest event – we could check these aspects within the first event – BeginRequest instead.&nbsp; The code is listed below. </p> <p class="MsoNormal"><span style="font-size:10pt;color:blue;font-family:consolas;"></span></p> <p class="MsoNormal"><span style="font-size:10pt;color:blue;font-family:consolas;">void</span><span style="font-size:10pt;font-family:consolas;"> context_BeginRequest(<span style="color:blue;">object</span> sender, EventArgs e)</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"></span><span style="font-size:10pt;font-family:consolas;">{</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"><span style="color:blue;"><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp; </font>string</span> ext = Path.GetExtension(HttpContext.Current.Request.Path).ToLower();</span><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:10pt;font-family:consolas;"><span style="color:blue;">if</span>(ext == ".aspx") </span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:10pt;font-family:consolas;">{</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue;">if</span> (<span style="color:blue;">this</span>.IsEnabled)</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue;">if</span> (!IsClientIPValid())</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpContext.Current.RewritePath("~/SiteUnavailable.htm");</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">&nbsp;&nbsp;&nbsp;&nbsp; }</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">}</span></p> <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"></span></p> <p class="MsoNormal">Notice that you must place a SiteUnavailable.htm file at the root of the site in order to display content if the user’s client IP address does not match one that is configured in the web.config.&nbsp; You can find the current release for this component <a href="http://meinershagen.net/community/files/folders/files_ewh_releases/entry155.aspx">here</a>.</p></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2008-08-10 22:41:44</wp:post_date>
  <wp:post_date_gmt>2008-08-10 22:41:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-siteavailabilityhttpmodule-based-on-client-ip-address</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718597]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Type-Safe Enum Strings in .NET</title>
  <link>https://toddmeinershagen.wordpress.com/?p=5</link>
  <pubDate>Tue, 19 Aug 2008 04:57:56 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.wordpress.com/2008/08/19/type-safe-enum-strings-in-net/</guid>
  <description/>
  <content:encoded><![CDATA[One thing that has always bothered me in .NET is the inability to create a type-safe set of string constants like an Enum. I would like to create a type such as the following:

[code lang=csharp]
public enum StoredProcedure : string  
{  
   DeleteConsumer = DeleteConsumer,  
   EditConsumer = EditConsumer,  
   GetConsumer = GetConsumer  
}
[/code]

This would be incredibly useful for those situations where you are passing constant strings to a given method and you would like to limit the parameter that is passed in to a finite set of options that can be detected through a type-safe check during compile time.

[code lang=csharp]
public void ExecuteDataSet(StoredProcedures storedProcedure)  
{  
   SqlCommand command = new SqlCommand();  
   command.CommandType = CommandType.StoredProcedure;  
   command.CommandText = storedProcedure.ToString();  
}
[/code]

Unfortunately, a simple constant does not provide type-safe protection for the method call. If a developer is not aware of the pattern, they may end up sending in a literal string of their choosing. So, instead you end up with the following:

[code lang=csharp]
public void ExecuteDataSet(string storedProcedure)  
{  
   SqlCommand command = new SqlCommand();  
   command.CommandType = CommandType.StoredProcedure;  
   command.CommandText = storedProcedure.ToString();  
}
[/code]

After working at a heterogeneous shop, I learned that Java has been creating their own type-safe string Enum classes for solving this situation for years before the formal Enum type was added to the 1.5 release of the Java Runtime.

The example below shows how a typical Java developer would implement this concept in Java syntax.

[code lang=java]
public final class Color {  

    private String name;  

    private Color(String name) {  
        this.name = name;  
    }  

    public String toString() {  
        return this.name;  
 }  

 public static final Color Red = new Color(&quot;Red&quot;);  
 public static final Color Green = new Color(&quot;Green&quot;);  
 public static final Color Blue = new Color(&quot;Blue&quot;);  
}
[/code]

The basic idea is simple:

<ol>
<li>Define a class representing a single element of the enumerated type</p></li>
<li><p>Don't provide any public constructors for it.</p></li>
<li><p>Provide public static final fields, one for each constant in the enumerated type.</p></li>
</ol>

<p>Because there is no way for clients to create objects of the type, there will never be any objects of the type besides those exported via the public static final fields.

In order to make this easier to use within .NET, I created an abstract base type, <code>StringConstant</code>, that allows a developer to quickly create the functionality above plus some other goodies such as <code>CompareTo()</code>, <code>Equals()</code>, <code>GetHashCode()</code>, and the == and != operators for comparison to string literals.

In order to use the code, you merely define your class as follows:

[code lang=csharp]
namespace Shared
{
    public class StoredProcedures : StringConstant 
    {  
        public static readonly StoredProcedures GetConsumer = new StoredProcedures(&quot;GetConsumer&quot;);  
        public static readonly StoredProcedures EditConsumer = new StoredProcedures(&quot;EditConsumer&quot;);  
        public static readonly StoredProcedures DeleteConsumer = new StoredProcedures(&quot;DeleteConsumer&quot;);  

        private StoredProcedures(name) : base(name){}  
    }
}
[/code]

The only part that does not work (this is the same for the Java version) is that it cannot be used in switch...case statements. Those require the use of an underlying integral type which is not present. Instead, you should use the if...else if construct to perform the same logic.

Below is the code for the base class for StringConstant.

[code lang=csharp]
using System;
using System.Collections;
using System.Reflection;

namespace Shared
{
    public abstract class StringConstant : IComparable
    {
        private readonly string _value;

        protected StringConstant()
        {
        }

        protected StringConstant(string value)
        {
            _value = value;
        }

        public string Value
        {
            get { return _value; }
        }

        public override string ToString()
        {
            return Value;
        }

        public override bool Equals(object obj)
        {
            var otherValue = obj as StringConstant;

            if (otherValue == null)
            {
                return false;
            }

            var typeMatches = GetType().Equals(obj.GetType());
            var valueMatches = _value.Equals(otherValue.Value);

            return typeMatches &amp;&amp; valueMatches;
        }

        public override int GetHashCode()
        {
            return _value.GetHashCode();
        }

        public virtual int CompareTo(object other)
        {
            return Value.CompareTo(((StringConstant)other).Value);
        }
    }
}
[/code]

In addition to the class, you may use the following xunit tests to explore my assumptions on its use.

<strong>Note:</strong> These tests require the <a href="https://www.nuget.org/packages/xunit/">xunit</a> and the <a href="https://www.nuget.org/packages/FluentAssertions/">FluentAssertions</a> libraries to run properly.

[code lang=csharp]
using FluentAssertions;
using Shared;
using Xunit;

namespace Tests
{
    public class StringConstantTests
    {
        [Fact]
        public void GIVEN_instance_WHEN_getting_value_THEN_returns_value() 
        {
            StoredProcedures.EditConsumer.Value.Should().Be(&quot;EditConsumer&quot;);
        }

        [Fact]
        public void GIVEN_instance_WHEN_to_stringing_THEN_returns_value()
        {
            StoredProcedures.DeleteConsumer.ToString().Should().Be(&quot;DeleteConsumer&quot;);
        }

        [Fact]
        public void GIVEN_instance_WHEN_comparing_with_an_equal_instance_THEN_returns_0()
        {
            StoredProcedures.DeleteConsumer.CompareTo(StoredProcedures.DeleteConsumer).Should().Be(0);
        }

        [Fact]
        public void GIVEN_instance_WHEN_comparing_with_a_non_equal_instance_THEN_return_negative_1()
        {
            StoredProcedures.DeleteConsumer.CompareTo(StoredProcedures.EditConsumer).Should().Be(-1);
        }

        [Fact]
        public void GIVEN_instance_WHEN_checking_if_equal_to_an_equal_instance_THEN_returns_true()
        {
            StoredProcedures.DeleteConsumer.Equals(StoredProcedures.DeleteConsumer).Should().BeTrue();
            (StoredProcedures.GetConsumer == StoredProcedures.GetConsumer).Should().BeTrue();
            (StoredProcedures.GetConsumer != StoredProcedures.DeleteConsumer).Should().BeTrue();
        }

        [Fact]
        public void GIVEN_instance_WHEN_checking_if_equal_to_a_non_equal_instance_THEN_returns_false()
        {
            StoredProcedures.DeleteConsumer.Equals(StoredProcedures.EditConsumer).Should().BeFalse();
            (StoredProcedures.GetConsumer == StoredProcedures.EditConsumer).Should().BeFalse();
            (StoredProcedures.GetConsumer != StoredProcedures.GetConsumer).Should().BeFalse();
        }

        [Fact]
        public void GIVEN_enum_type_WHEN_getting_names_THEN_returns_every_instance()
        {
            var items = StringConstant.GetNames(typeof(StoredProcedures));
            items.Should().Contain(StoredProcedures.DeleteConsumer);
            items.Should().Contain(StoredProcedures.EditConsumer);
            items.Should().Contain(StoredProcedures.GetConsumer);
        }

        [Fact]
        public void GIVEN_instance_WHEN_getting_hashcode_THEN_return_hash_of_value()
        {
            StoredProcedures.DeleteConsumer.GetHashCode().Should().Be(&quot;DeleteConsumer&quot;.GetHashCode());
            StoredProcedures.EditConsumer.GetHashCode().Should().Be(&quot;EditConsumer&quot;.GetHashCode());
            StoredProcedures.GetConsumer.GetHashCode().Should().Be(&quot;GetConsumer&quot;.GetHashCode());
        }
    }
}
[/code]

<blockquote>
  <strong>Update:</strong>  Jimmy Bogard has <a href="https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/">an excellent description</a> of this same concept and more complete base class for Enumeration that you might want to leverage in your own code.
</blockquote>

I hope this helps someone out there...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2008-08-19 04:57:56</wp:post_date>
  <wp:post_date_gmt>2008-08-19 04:57:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>type-safe-enum-strings-in-net</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="craftsmanship"><![CDATA[craftsmanship]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28688082028]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>resolution-randomizer-2009-toddmeinershagen.jpg</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=6#main</link>
  <pubDate>Thu, 08 Jan 2009 22:47:42 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2009/01/resolution-randomizer-2009-toddmeinershagen.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2009-01-08 22:47:42</wp:post_date>
  <wp:post_date_gmt>2009-01-08 22:47:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>resolution-randomizer-2009-toddmeinershagenjpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>7</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2009/01/resolution-randomizer-2009-toddmeinershagen.jpg</wp:attachment_url>
</item>
<item>
  <title>Random Resolution for the New Year 2009</title>
  <link>https://toddmeinershagen.wordpress.com/?p=7</link>
  <pubDate>Thu, 08 Jan 2009 22:47:43 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.wordpress.com/2009/01/08/random-resolution-for-the-new-year-2009/</guid>
  <description/>
  <content:encoded><![CDATA[<p>Well, it's that time of year again when we make New Year's resolutions.&nbsp; I am not a big fan of doing this once a year, because I believe that we should be daily looking for ways to grow and help others.</p> <p>However, I found out about a site that randomly chooses a resolution for you from Caleb Jenkin's <a href="http://calebjenkins.com/">blog</a> post <a href="http://developingux.com/2009/01/07/resolution-randomizer/">today</a>.&nbsp; It sounded simple enough.&nbsp; So, here's what it came up with for me.</p> <p><a href="http://resolutionrandomizer.pop.us/ecard.aspx"><img style="border-right:0;border-top:0;border-left:0;border-bottom:0;" height="382" alt="resolution_randomizer_2009_toddmeinershagen" src="http://toddmeinershagen.files.wordpress.com/2009/01/resolution-randomizer-2009-toddmeinershagen.jpg" width="455" border="0"></a></p> <p>Pretty appropriate, no?&nbsp; Try it out by clicking <a href="http://resolutionrandomizer.pop.us/ecard.aspx">here</a>. </p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2009-01-08 22:47:43</wp:post_date>
  <wp:post_date_gmt>2009-01-08 22:47:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>random-resolution-for-the-new-year-2009</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718482]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Data Integration Tests and Transactions - Part 2</title>
  <link>https://toddmeinershagen.wordpress.com/?p=16</link>
  <pubDate>Mon, 26 May 2014 01:47:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2014/05/26/data-integration-tests-and-transactions-part-2</guid>
  <description/>
  <content:encoded><![CDATA[<a href="./2014/05/data-integration-tests-and-transactions.html">Last time</a> I talked about how to use the <a href="http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx">TransactionScope</a> class to handle the rollback of any changes made during a data integration test. This time, I would like to talk about another issue that will eventually come up using transactions: using <a href="http://msdn.microsoft.com/en-us/data/ef.aspx">Entity Framework</a> code-first in combination with any other data access framework while leveraging TransactionScope.

In our case, we use <a href="https://code.google.com/p/dapper-dot-net/">Dapper</a> to insert data before our tests and to assert things about the state of the database after exercising the <a href="http://weblogs.asp.net/scottgu/archive/2010/07/16/code-first-development-with-entity-framework-4.aspx">code-first Entity Framework</a> data layer functionality we are testing. Below is our example.
<pre><code>private TransactionScope _scope;

[SetUp]
public void SetUp()
{
    _scope = new TransactionScope();
}

[TearDown]
public void TearDown()
{
    _scope.Dispose();
}

[Test]
public void test_to_demo_ef_and_dapper_connections()
{
    var person = new Person {FirstName = "Todd", LastName = "Meinershagen"};
    var sql = "INSERT INTO dbo.Persons (FirstName, LastName) ";
    sql = sql + "VALUES (@FirstName, @LastName)";

    using (var connection = new SqlConnection("a connection string"))
    {
        connection.Execute(sql, person);
    }

    var db = new PersonContext();
    var matchingPersons = 
        from p in db.Persons
        where
            (p.FirstName == person.FirstName) &amp;&amp;
            (p.LastName == person.LastName)
        select p;

    matchingPersons.FirstOrDefault().Should().NotBeNull();
}
</code></pre>
Both Dapper and EF establish their own connections, and we would expect that each connection would take part in the ambient transaction being created during the [SetUp] of our test fixture.

Normally, this is not an issue, but when the tests are run, we get a message similar to below:
<pre><code>MSDTC on server 'servername' is unavailable.
</code></pre>
This can occur for any number of reasons such as the following:
<ul>
	<li>Opening multiple connections with same connection string to SQL Server 2005.</li>
	<li>Opening multiple nested connections with same connection string to SQL Server 2008.</li>
	<li>Opening multiple connection to two different SQL Server 2008 instances.</li>
</ul>
In the case of our tests, we are making two connections (one for EF and one for Dapper) to SQL Server 2008 using the same connection string. Based on the guidance above, this should not force our system to escalate to MSDTC.

So, what is happening here?

After searching diligently on the internet (thank God for the internet!), I found an <a href="http://stackoverflow.com/questions/18088949/entityframeworkmue-in-entity-framework">article</a> explaining that Microsoft cleverly adds information to a code-first connection string to allow Microsoft to collect statistics from those using Azure and Entity Framework to determine what percentage use code-first as opposed to database-first. (Why Microsoft, why?) This is supposed to have been fixed in EF 6.0.

So, instead of using a connection string as you specified:
<pre><code>Data Source=(local);
Initial catalog=LocalDb;
Integrated Security=True;
</code></pre>
The system uses the following for EF:
<pre><code>Data Source=(local);
Initial catalog=LocalDb;
Integrated Security=True;
Application Name=EntityFrameworkMUE
</code></pre>
So, what does this mean?

Unfortunately, this causes our system to see the two connections (Dapper and EF) as two different connection strings and therefore, it looks like you are connecting to two different data sources which escalate to MSDTC. What a pain!

So, how do we get around this issue.

One way would be to use EF for both production and test code, although this robs us of the benefit of quickly setting up data using a light-weight framework like Dapper. Another option is to modify our test project’s configuration file by explicitly specifying the Application Name for our connection string. The system will then see the two connections as the same. No more escalation to MSDTC!

Hope this helps.
<div class="blogger-post-footer">
<div><span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a style="text-align:left;" href="http://www.improvingenterprises.com/">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span></div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2014-05-26 01:47:00</wp:post_date>
  <wp:post_date_gmt>2014-05-26 01:47:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>data-integration-tests-and-transactions-part-2</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing"><![CDATA[testing]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[2971845694695454778]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715550]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Data Integration Tests and Transactions - Part 1</title>
  <link>https://toddmeinershagen.wordpress.com/?p=17</link>
  <pubDate>Fri, 23 May 2014 07:31:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2014/05/23/data-integration-tests-and-transactions-part-1</guid>
  <description/>
  <content:encoded><![CDATA[I have been writing some integration tests in .NET lately to specify behavior for my data layer. The issue that always comes up is how to make sure that each test is completely isolated from other tests. This requires each test to initialize needed data and at the end to clean up any data that was created so that other tests are not impacted by it. In the past I have set up compensating queries to delete that same data on tear down.

This can create one of two problems:
<ul>
	<li><strong>maintainability</strong> - it is hard to maintain this logic going forward</li>
	<li><strong>reliability</strong> - it doesn’t guarantee successful rollback of the initial inserts because the query could possibly fail leaving the tests in a position for unsuccessful future tests against the database</li>
</ul>
So, what do you do?

I have been using the handy <a href="http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx">TransactionScope</a> class to allow any connections to participate in the ambient transaction and then dispose of the transaction without committing on tear down of the fixture.

In the example below, I have used NUnit, but this could work with other testing frameworks quite well.
<pre><code>[TestFixture]
public class MyFixture
{
    private TransactionScope _scope;

    [SetUp]
    public void SetUp()
    {
        _scope = new TransactionScope();
    }

    [TearDown]
    public void TearDown()
    {
        _scope.Dispose();
    }

    ///This is a silly sample test for display purposes only.
    [Test]
    public void given_context_when_something_happens_should_have_expected_outcome()
    {
        ExecuteSomeLogicForInsertingDataForContext();

        RunSomeActionToMakeSomethingHappen();

        AssertThatSomeExpectedOutcomeOccured();
    }
}
</code></pre>
You could make this an abstract base class and make the SetUp and TearDown methods virtual if you would like to reuse this across any of your data test fixtures. As long as you don’t call _scope.Complete() the changes you have made should be rolled back/aborted on the disposal of the transaction.

Hope this helps!
<div class="blogger-post-footer">
<div>
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a style="text-align:left;" href="http://www.improvingenterprises.com/">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span></div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2014-05-23 07:31:00</wp:post_date>
  <wp:post_date_gmt>2014-05-23 07:31:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>data-integration-tests-and-transactions-part-1</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="testing"><![CDATA[testing]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5922353542288677497]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715587]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>New Blog Series</title>
  <link>https://toddmeinershagen.wordpress.com/?p=18</link>
  <pubDate>Mon, 20 Jan 2014 23:29:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2014/01/20/new-blog-series</guid>
  <description/>
  <content:encoded><![CDATA[As the new year is upon us, I have decided that I need to more consistently contribute to the community. And what better way to do that than to write more consistently on my blog.

In order to produce something a few times every week, I have decided to explore the tools that I use every day in greater depth - to look further into the nooks and crannies and make sure that I truly understand the capabilities of the tools that I leverage.

This idea came from the book, <strong>“The Passionate Programmer”</strong> by Chad Fowler. In it, he suggests that,
<blockquote>Our industry tends to practice on the job.</blockquote>
He then relates our craft to the art of playing music, and,
<blockquote>Musicians are paid to perform in public—not to practice.</blockquote>
So why would we expect to do it differently in our profession.

<figure><img title="A Practicing Violinist" src="https://raw2.github.com/toddmeinershagen/Blog.Posts/master/images/musician_practicing.jpg" alt="" />
<figcaption></figcaption></figure>It takes hours of practice in order to learn our craft and, unfortunately, too many are practicing on the job these days, because it is acceptable. You cannot learn everything that you ought to know as a software craftsman by merely writing code for production software. Focusing on certain aspects is needed in order to increase the quality and resilience of what we produce.

One of the areas that musicians focus on developing is <strong>physical/coordination</strong> or focusing on fundamental technical aspects of playing an instrument. They do this by playing scales in all of the range of the instrument, building the muscles in their lips or gaining callouses in their fingers, practicing dynamics with their diaphragms, etc. They cannot always be playing nice sounding music - they have to play simple, focused, seemingly monotonous exercises to focus on these fundamentals.

How can a software craftsman do the same? They can focus on looking at the full range of functionality available to them within a certain language, platform, or tool. And they can practice using these tools in private exercises known as katas or personal projects. That is what I seek to do with this series.

For starters, you may not have noticed it, but I am writing this blog now entirely in markdown syntax. In this post, I learned the following:
<ul>
	<li><strong>Images</strong> - add an exclamation ‘!’ at the beginning, follow with brackets [alt text] with some alternate text, open parentheses (url “optional title”) with a url and a title in quotes, which is optional.</li>
	<li><strong>Strong Emphasis</strong> - add two astericks ‘**’ or two underlines ‘__’ on both sides of a word/phrase to emphasize it in italics.</li>
	<li><strong>Block Quotes</strong> - add a greater than sign ‘&gt;’ to the left of each sentence and it will stand out as a quote.</li>
	<li><strong>Unordered Lists</strong> - add an astericks ‘*’ before each line which is translated into an unordered list item in HTML.</li>
	<li><strong>Inline Links</strong> - add brackets [text] including any text to display and follow up with parentheses (url “optional title”) with a url and optional title in quotes.</li>
</ul>
You can find out more about markdown syntax by looking at <strong><a href="http://daringfireball.net/projects/markdown/syntax#img">this post</a></strong> from the Daring Fireball blog, which does a good job of explaining the basic features of markdown.

Hope it helps!
<div class="blogger-post-footer">
<div>
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a style="text-align:left;" href="http://www.improvingenterprises.com/">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span></div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2014-01-20 23:29:00</wp:post_date>
  <wp:post_date_gmt>2014-01-20 23:29:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-blog-series</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="craftsmanship"><![CDATA[craftsmanship]]></category>
  <category domain="category" nicename="markdown"><![CDATA[markdown]]></category>
  <category domain="category" nicename="passion"><![CDATA[passion]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6842122971119862290]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715625]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[ide bisnis modal kecil]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://indobisnisblog.wordpress.com/2014/03/20/bisnis-dengan-modal-di-bawah-satu-juta</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2014-06-04 21:01:23</wp:comment_date>
    <wp:comment_date_gmt>2014-06-04 21:01:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[i think your web very informative,.thanks for sharing information by <br /><a href="http://indobisnisblog.wordpress.com/2014/03/20/bisnis-dengan-modal-di-bawah-satu-juta/" rel="nofollow">Ide Bisnis Modal Kecil</a><br />]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>New Library for Non-Deterministic Testing</title>
  <link>https://toddmeinershagen.wordpress.com/?p=19</link>
  <pubDate>Fri, 16 Aug 2013 00:16:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2013/08/16/new-library-for-non-deterministic-testing</guid>
  <description/>
  <content:encoded><![CDATA[I have currently been working on creating a system-level, feature test for some functionality that our company is developing to allow hospitals and health care providers to request a batch of eligibility requests for patients using a combination of Visual Studio 2012, <a href="http://www.specflow.org/specflownew/">SpecFlow 1.8</a> and <a href="http://fluentassertions.codeplex.com/">FluentAssertions</a>.  In doing so, I ran into the problem of non-deterministic time.

Once a user uploads a file of requests, there is not a determined amount of time for that request to get a response from a third-party provider that we use to fulfill the request.  So how do we handle the fact that we need to make some assertions at the end of the upload?  What would be nice would be to either retry assertions that fail or keep trying an assertion in the event of failure for a given timeout period.  In this case, we need to know that we can get a response within 30 seconds.

Enter <a href="https://github.com/toddmeinershagen/James.Testing">James.Testing</a>.  (Check it out when you get a chance.  You can download the dependency to your project from NuGet.org <a href="https://www.nuget.org/packages/James.Testing/">here</a>.

<a href="https://github.com/toddmeinershagen/James.Testing">James.Testing</a> is a library of test utilities named after the author who wrote the book of James in the Bible.

<blockquote>
  "Dear brothers and sisters, when troubles come your way, consider it an opportunity for great joy. For you know that when your faith is tested, your endurance has a chance to grow." <strong>(James 1:2-3)</strong>
</blockquote>

It's a fairly apt description of what testing ought to do for our applications as well.  Source for the library can be found <a href="http://www.github.com/toddmeinershagen/james.testing">here</a>.  Below are some of its features.

<h2>Action Extensions</h2>

<h3>Executing an Action with Retries</h3>

Many times in integration tests, there is a non-deterministic time period between executing some initial action and asserting your expectations for the outcome.  In this case, it would be nice to have a method for automatically having the test retry your action for a number of times even though the assertion fails.  This method also supports setting a wait time in between retries so that you don't overload your system.

<strong>Example:</strong>

[code lang="csharp"]
var counter = 0;
Action action = () =&amp;gt; counter++;
action.ExecuteWithRetries(times, waitTimeInSeconds);
[/code]

<h3>Executing an Action with a Timeout Period</h3>

In other cases, you might want to execute a given action for a given time period.  For instance, if you have a requirement to expect a response within 30 seconds, you can set the maximum timeout period to 30 seconds for your assertions.  This method also allows a user to set a given wait time between executions of a given action.

<strong>Example:</strong>

[code lang="csharp"]
var counter = 0;
Action action = () =&amp;gt; counter++;
action.ExecuteWithTimeout(timeoutInSeconds, waitTimeInSeconds);
[/code]

<h3>Executing an Action while Gulping Exceptions</h3>

Sometimes when you execute an action you expect an exception to occur, but you don't want the exception to cause a failure because there is something else you need to verify.  This method will do just the trick.

<strong>Example:</strong>

[code lang="csharp"]
var counter = 0;
Action retryAction = () =&amp;gt;
    {
        while (counter++  
{
    Thread.CurrentThread.CurrentCulture = new CultureInfo(&amp;quot;fr-FR&amp;quot;);
    session = new Session(new LocalPhantomEnvironment());

    session.CurrentCulture.Name.Should().Be(&amp;quot;fr-FR&amp;quot;);
};

action.ExecuteWithCleanup(() =&amp;gt; session.End());
[/code]

<h2>Wait Methods</h2>

<h3>Waiting For a Time Period</h3>

Many times in multi-threaded and integration tests, you need to wait for a number of seconds or milliseconds for other events to process.  James.Testing now provides a more readable syntax for these events.

<strong>Example:</strong>

[code lang="csharp"]
Wait.For(1).Seconds();
Wait.For(250).Milliseconds();
[/code]

<h3>Waiting Until Something is True</h3>

Sometimes in multi-threaded and integration tests, you need to wait until something is true or that some state has been updated before moving forward.  The easiest way to deal with this is to let James.Testing wait until some predicate expression has come true.

<strong>Example:</strong>

[code lang="csharp"]
Wait.Until(() =&amp;gt; Test.Current.EventLogs.Count == 2);
[/code]

There are cases in which a predicate may never end up being true.  By default, the Wait.Until() method has a timeout of 15 seconds.  You can also configure that when calling the API by passing in a timeout period.

<strong>Timeout Expressed as TimeSpan</strong>

[code lang="csharp"]
Wait.Until(() =&amp;gt; Test.Current.EventLogs.Count == 2, TimeSpan.FromSeconds(5));
[/code]

<strong>Timeout Expressed as Integer - Seconds</strong>

[code lang="csharp"]
Wait.Until(() =&amp;gt; Test.Current.EventLogs.Count == 2, timeoutInSeconds);
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2013-08-16 00:16:00</wp:post_date>
  <wp:post_date_gmt>2013-08-16 00:16:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-library-for-non-deterministic-testing</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1155859615003522966]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28116626582]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Investigating a Build Configuration Change in TeamCity</title>
  <link>https://toddmeinershagen.wordpress.com/?p=20</link>
  <pubDate>Fri, 05 Oct 2012 21:59:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2012/10/05/investigating-a-build-configuration-change-in-teamcity</guid>
  <description/>
  <content:encoded><![CDATA[<p> </p> <p>Our team is using TeamCity to run our continuous integration and nightly builds for our current project.  We discovered that in one of our build configurations, there was a build step that was no longer present, and we wanted to know who/what deleted it.</p> <p>After looking online without success, I found that TeamCity actually provides auditing for these kinds of activities out of the box.  In order to find this information do the following:</p> <p>1.  Click on the Administration link in the upper, right-hand corner of the TeamCity dashboard.  (Yes – this requires administrator privileges for at least the project.)</p> <p>2.  Click on the Audit link under the Project-related Settings section in the left-hand side of the screen.  (Shown below)</p> <p><a href="http://lh6.ggpht.com/-lQJQbjowgL4/UG9YTxfzC9I/AAAAAAAAAEI/hiUdLJ3dtlw/s1600-h/image%25255B15%25255D.png"><img title="image" border="0" alt="image" src="http://lh6.ggpht.com/-WsmzBATH3-g/UG9YUQLBPCI/AAAAAAAAAEQ/2WyzE6bPOAQ/image_thumb%25255B11%25255D.png?imgmax=800" width="598" height="78"></a></p>  <p>3.  Select desired filters above the results list.  You can filter by action, build configuration, and user.</p> <p>4.  In the list item in Step 2, you can actually click on the “view changes” link to see a comparison of the configurations in order to find out what has changed.  Below is an example of a build step being disabled.</p> <p><a href="http://lh6.ggpht.com/-4vynBKTHows/UG9YU0J3WGI/AAAAAAAAAEY/gN1NYPJk_d8/s1600-h/image%25255B19%25255D.png"><img title="image" border="0" alt="image" src="http://lh6.ggpht.com/-LwloKuEg_D4/UG9YVo00iwI/AAAAAAAAAEg/kVscamG1QEY/image_thumb%25255B13%25255D.png?imgmax=800" width="606" height="107"></a></p> <p>Hope this help.</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2012-10-05 21:59:00</wp:post_date>
  <wp:post_date_gmt>2012-10-05 21:59:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>investigating-a-build-configuration-change-in-teamcity</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8031875907519037309]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715701]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>15</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2013-06-14 08:39:06</wp:comment_date>
    <wp:comment_date_gmt>2013-06-14 08:39:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am extremely impressed together with your writing abilities and also with <br />the structure to your blog. Is this a paid topic or did you modify it yourself?<br />Either way keep up the excellent high quality writing,<br />it is uncommon to look a nice weblog like this one nowadays.<br />.<br /><br />My homepage <a href="http://haisanphukhang.vn/diendan/entry.php?b=25791" rel="nofollow">Discover More</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>16</wp:comment_id>
    <wp:comment_author><![CDATA[Todd Meinershagen]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/15973461415802595901</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2013-06-14 13:33:55</wp:comment_date>
    <wp:comment_date_gmt>2013-06-14 13:33:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, Anonymous.  Those were kind words and very encouraging.  I haven&#39;t been posting lately, but your comments make me want to start again.  This post was my own original, unpaid work.  Hope it helped!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>AgileDotNet 2012</title>
  <link>https://toddmeinershagen.wordpress.com/?p=21</link>
  <pubDate>Tue, 24 Jan 2012 03:24:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2012/01/24/agiledotnet-2012</guid>
  <description/>
  <content:encoded><![CDATA[My company, Improving, is hosting our third annual AgileDotNet conference in Dallas on Friday, February 17th. It will be a day of presentations and discussion focused on agile software development on the Microsoft stack, ALM tools, and the leadership and cultural issues involved in agile IT.  Hope you can  join us!<br /><br />Full details can be found <a href="http://www.agiledotnet.com/">here</a>.<div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2012-01-24 03:24:00</wp:post_date>
  <wp:post_date_gmt>2012-01-24 03:24:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>agiledotnet-2012</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[7735913782213558477]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715728]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Get Your AOP</title>
  <link>https://toddmeinershagen.wordpress.com/?p=22</link>
  <pubDate>Tue, 27 Dec 2011 23:52:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/?p=22</guid>
  <description/>
  <content:encoded><![CDATA[<div><br />Are you a development lead or application architect or a member of a self-organizing team? <br /><br />If so, you have probably been responsible for reviewing other developer's code and making sure that  coding standards, especially infrastructure-type concerns, are followed in a consistent manner.  These can include things like security, logging, tracing, auditing, transaction management, threading, etc.<br /><br />For instance, your team's standards may dictate that every method needs to log at the beginning, ending, and after exceptions during the course of a given method execution.  This might look like so:<br /><div><br /></div><br /><br /></div><div>  </div>Notice that the developer needs to make sure that they call the Debug method of the Logger at the beginning and end of each method.  This is in contrast to calling the Error method of the Logger in the event of an exception.  In addition, they need to make sure to get the messages that are sent in a consistent format. <br /><br />This can be a daunting task, and will usually end up not being followed throughout the code base if each member of the team is not diligent to review every part of the code.<br /><br />In these situations, it might be possible to encapsulate this logic in a decorative method that accepts a lambda like so:<br /><br />This seems to help, but it still requires each developer to be diligent to include the call to the decorative method, and they will have a more difficult time debugging their code now that it is encapsulated in an action that is called from the decorative method.  Another problem will occur once multiple of these types of concerns needs to be added to the code.<br /><br /><hr /><span style="text-align:left;">Todd Meinershagen is a Principal with </span><a href="http://improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2011-12-27 23:52:00</wp:post_date>
  <wp:post_date_gmt>2011-12-27 23:52:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-your-aop</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1068063308814581951]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Gists for Code Snippets</title>
  <link>https://toddmeinershagen.wordpress.com/?p=23</link>
  <pubDate>Mon, 26 Dec 2011 20:42:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2011/12/26/using-gists-for-code-snippets</guid>
  <description/>
  <content:encoded><![CDATA[Normally, I use Windows LiveWriter to write my blogs at <a href="http://www.blogspot.com/">BlogSpot</a>.  And I have always used syntax highlighter plug-ins to insert code snippets.  These utilities in the past inserted a lot of html elements and style definitions in-line with the rest of the post or required setting up global stylesheets and javascript in order to work.<br /><div><br /></div><div>In the last few weeks, as I have been looking at transitioning my blog to a ruby-based engine called <a href="http://www.octopress.org/">OctoPress</a>, I found another mechanism for inserting code snippets - <a href="http://gist.github.com/">gists</a> from <a href="http://www.github.com/">GitHub</a>.  It allows you to store your code snippets online and easily add them to your posts with one line of code.</div><div><br /></div><div>All you need to do is:</div><div><br /></div><div>1.  Go to http://gists.github.com</div><div><br /></div><div>2.  Sign up for  a free GitHub account</div><div><br /></div><div>All you have to do is click on the link in the upper, right-hand corner "Sign up for a GitHub account".  It leads you through a process.</div><div><br /></div><div class="separator" style="clear:both;text-align:center;"><a href="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-24-49pm.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="441" src="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-24-49pm.png?w=300" width="640" /></a></div><div class="separator" style="clear:both;text-align:center;"><br /></div><div class="separator" style="clear:both;text-align:left;">If you don't wish to create an account, you can create gists anonymously as well.</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">3.  Add gist to GitHub</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:center;"><a href="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-43pm.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="352" src="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-43pm.png?w=300" width="640" /></a></div><div class="separator" style="clear:both;text-align:left;">All you need to do in order to add a new gist is: </div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">a.  Create a name for the gist</div><div class="separator" style="clear:both;text-align:left;">b.  Create a name for the file (this is optional)</div><div class="separator" style="clear:both;text-align:left;">c.  Select a language </div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">If you give the file a name, the system will determine what the language is from the extension.</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">d.  Put the text of the code snippet in the body of the gist</div><div class="separator" style="clear:both;text-align:left;">e.  Save the gist by clicking on the Save Gist button.</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:center;"><a href="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-23pm.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="214" src="https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-23pm.png?w=300" width="640" /></a></div><div class="separator" style="clear:both;text-align:center;"><br /></div><div class="separator" style="clear:both;text-align:left;">4.  Add the gist in your post</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">In order to add the gist to your post, you will need to click on the show embed link and add the html snippet to the html content of your post.  In this case, </div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;"> </div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">Once you have added this, the code should appear in the post as below.</div><br /><br /><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">5.  Add line numbers via additional css styles</div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;">You may notice once using the steps above that the native gists from GitHub do not support line numbers currently, so in order to add them I found a gist that contains the .css styles that you need to add to your blog site.  Once added, all snippets appear with line numbers as you saw in point number 4. </div><div class="separator" style="clear:both;text-align:left;"><br /></div><div class="separator" style="clear:both;text-align:left;"><br /></div>  <br /><div>If you find another way to do this by adjusting settings at GitHub, let me know in the comments. <br /><br />Hope this helps!</div><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2011-12-26 20:42:00</wp:post_date>
  <wp:post_date_gmt>2011-12-26 20:42:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-gists-for-code-snippets</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[454356646858399916]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715800]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Creating Data-Driven Tests in MS Test</title>
  <link>https://toddmeinershagen.wordpress.com/?p=24</link>
  <pubDate>Fri, 11 Feb 2011 09:18:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2011/02/11/creating-data-driven-tests-in-ms-test</guid>
  <description/>
  <content:encoded><![CDATA[For my current client, I was looking for a way to create a data-driven unit test in MSTest.  Basically, you can define a test once and then define a data source that provides multiple rows of data to be sent through the same test.  That way, you don’t have to write redundant tests.<br />I had done this previously, but I couldn’t remember how it was done.  I’m writing this post in order to remind myself and hopefully help someone out there.<br />1.  Create a Test Method<br />The first step is to make sure you have a test method.  You can do this by making sure that in your test project you have at least one class decorated with the [TestClass] attribute and a method with the [TestMethod] attribute.  <br /><div class="csharpcode"><pre class="alt">[TestMethod]</pre><pre><span class="kwrd">public</span> <span class="kwrd">void</span> Add_when_two_numbers_returns_proper_result()</pre><pre class="alt">{</pre><pre></pre><pre class="alt">}</pre></div><br />.csharpcode, .csharpcode pre { font-size: small; color: black; font-family: consolas, "Courier New", courier, monospace; background-color: #ffffff; /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { background-color: #f4f4f4; width: 100%; margin: 0em; } .csharpcode .lnum { color: #606060; } <br /><br />When creating this test class, make sure to keep the TestContext property as it is defaulted.  You will be using this when coding your test.<br /><br /><br /><div class="csharpcode"><pre class="alt"><span class="kwrd">private</span> TestContext _testContext;</pre><pre> </pre><pre class="alt"><span class="rem">/// <summary></span></pre><pre><span class="rem">///Gets or sets the test context which provides</span></pre><pre class="alt"><span class="rem">///information about and functionality for the current test run.</span></pre><pre><span class="rem">///</summary></span></pre><pre class="alt"><span class="kwrd">public</span> TestContext TestContext</pre><pre>{</pre><pre class="alt">get</pre><pre>{</pre><pre class="alt"><span class="kwrd">return</span> _testContext;</pre><pre>}</pre><pre class="alt">set</pre><pre>{</pre><pre class="alt">_testContext = <span class="kwrd">value</span>;</pre><pre>}</pre><pre class="alt">}</pre></div><br />.csharpcode, .csharpcode pre { font-size: small; color: black; font-family: consolas, "Courier New", courier, monospace; background-color: #ffffff; /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { background-color: #f4f4f4; width: 100%; margin: 0em; } .csharpcode .lnum { color: #606060; } <br /><br />2.  Add a Test Data File<br /><br />For the purposes of this explanation we will be using a simple .csv file (TestData.csv).  Make sure to add a text file, preferably at the root of your project with that extension.  In the file, you will want to add data.  I have added three columns per row:  Operand1, Operand2, and ExpectedValue which represents the expected result of adding the two operands together.  You can add as many rows of data to check all of the boundary conditions that express your intentions for your unit test.<br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-x3LTJMI/AAAAAAAAAzs/7WSC_pfPJEg/s1600-h/image%5B66%5D.png"><img alt="image" border="0" height="158" src="http://lh4.ggpht.com/_3gdMjuMkpX4/TVT-yPYTFHI/AAAAAAAAAzw/C49cS0f4O6c/image_thumb%5B38%5D.png?imgmax=800" title="image" width="410" /></a><br /><br />Right-click on the file and select Properties to set the Build Action to Content and the Copy to Output Directory to Copy Always as shown below.  This will ensure that the file is copied to the Bin folder when running your unit tests.<br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-yc4ZdhI/AAAAAAAAAz0/ugITp5yT1YA/s1600-h/image%5B27%5D.png"><img alt="image" border="0" height="266" src="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-ygga9aI/AAAAAAAAAz4/yfNT0egZxMA/image_thumb%5B17%5D.png?imgmax=800" title="image" width="299" /></a><br /><br />3.  Open the Test View from the Test menu.<br /><br />From the Test menu, select the Windows –&gt; Test View option as shown below.<br /><br /><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/TVT-zNBhbHI/AAAAAAAAAz8/TWJvdP7Q-yA/s1600-h/image%5B4%5D.png"><img alt="image" border="0" height="345" src="http://lh4.ggpht.com/_3gdMjuMkpX4/TVT-zrs5-RI/AAAAAAAAA0A/Zs2Z8rQOv8s/image_thumb%5B2%5D.png?imgmax=800" title="image" width="430" /></a><br /><br />Once you open the Test View, you should see a list of the test methods that are available.  When a test is highlighted, you will see the properties for that particular test in the Properties pane as shown below.  <br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-0GECXTI/AAAAAAAAA0E/DK-UYStZ4c8/s1600-h/image%5B36%5D.png"><img alt="image" border="0" height="725" src="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-0ri4qkI/AAAAAAAAA0I/fgDlSDkWBqQ/image_thumb%5B22%5D.png?imgmax=800" title="image" width="386" /></a><br /><br />4.  Assign Test File as Test Data Source<br /><br />Find the row for Data Connection String in the Properties pane and click on the button to the far right with the ellipses (…).  That should open the following dialog where you will be presented with an option to set up a database, csv file, or xml file.<br /><br /><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/TVT-02i6S0I/AAAAAAAAA0M/ZhwHZ_SQiuM/s1600-h/image%5B17%5D.png"><img alt="image" border="0" height="356" src="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-1Rd7OtI/AAAAAAAAA0Q/3Qo9Y4F573U/image_thumb%5B11%5D.png?imgmax=800" title="image" width="378" /></a><br /><br />The database option should be self explanatory.  It is like any other database connection, and the most popular option is to use a simple MS Access DB or SQL Express database that you can include with your project.<br /><br />The other two options are file based.  The CSV file will be explained in further detail below.  The main difference between a CSV and XML file is that you can have multiple test data sets in the XML file while only one set of data would be accessible for a CSV.  So, if you need to set up data for multiple tests, you would need to maintain multiple files with the CSV option.  In the XML option, you could just maintain one with multiple sections within the XML file.<br /><br />Select the CSV File option and click Next.<br /><br />5.  Select Your CSV File<br /><br />At this point, you will be presented with a dialog to select a CSV file.  Click on the (…) button and select the location of the text file that you created for your test.<br /><br /><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/TVT-1hsntAI/AAAAAAAAA0U/hbZuogtm908/s1600-h/image%5B40%5D.png"><img alt="image" border="0" height="401" src="http://lh4.ggpht.com/_3gdMjuMkpX4/TVT-2L1T9SI/AAAAAAAAA0Y/dFF5qvdcgnE/image_thumb%5B24%5D.png?imgmax=800" title="image" width="433" /></a><br /><br />Once selected, the dialog will show the contents of your CSV file as a data grid to allow you to examine the contents to make sure that the data is what you were expecting.<br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-2W9liFI/AAAAAAAAA0c/-cQFninilUE/s1600-h/image%5B70%5D.png"><img alt="image" border="0" height="381" src="http://lh4.ggpht.com/_3gdMjuMkpX4/TVT-2mklPKI/AAAAAAAAA0g/cuPXtUb5_ck/image_thumb%5B40%5D.png?imgmax=800" title="image" width="413" /></a><br /><br /><br /><br /><br /><br /><br /><br />Click the Finish button once you have confirmed the file contents.  You will notice that the properties have been updated to reflect the change.<br /><br /><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-29mBjJI/AAAAAAAAA0k/Em7c81PdO4U/s1600-h/image%5B49%5D.png"><img alt="image" border="0" height="225" src="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-3SpJdqI/AAAAAAAAA0o/M1uDhNr3aqE/image_thumb%5B29%5D.png?imgmax=800" title="image" width="430" /></a><br /><br />In addition, Visual Studio will add a [DataSource] and [DeploymentItem] attributes to your original test method as shown below with the same information.  In the future, you can set these attributes up on a test without needing to use the Properties wizard for selecting a Data Source.<br /><br /><div class="csharpcode"><pre class="alt">[DataSource(<span class="str">"Microsoft.VisualStudio.TestTools.DataSource.CSV"</span>, <span class="str">"|DataDirectory|TestData.csv"</span>, <span class="str">"TestData#csv"</span>, DataAccessMethod.Sequential), DeploymentItem(<span class="str">"Demo.DataDrivenTestsTestData.csv"</span>), DeploymentItem(<span class="str">"TestData.csv"</span>), TestMethod]</pre><pre><span class="kwrd">public</span> <span class="kwrd">void</span> Add_when_two_numbers_returns_proper_result()</pre><pre class="alt">{</pre><pre></pre><pre class="alt">}</pre></div><br />.csharpcode, .csharpcode pre { font-size: small; color: black; font-family: consolas, "Courier New", courier, monospace; background-color: #ffffff; /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { background-color: #f4f4f4; width: 100%; margin: 0em; } .csharpcode .lnum { color: #606060; } <br /><br /><br />6.  Add Code to Reference Data Source<br /><br />Once you have added your test data to the test method, you will want to access it within the body of your unit test method.  This can be done by referencing the DataRow property of the TestContext class-level variable.  I have created a simple test to use the values to assert that the Add method of a simple Calculator class works as shown below.  Because a DataRow column returns an object, you will need to do some casting to the appropriate data types.<br /><br /><div class="csharpcode"><pre class="alt">[DeploymentItem(<span class="str">"Demo.DataDrivenTestsTestData.csv"</span>), DeploymentItem(<span class="str">"TestData.csv"</span>), DataSource(<span class="str">"Microsoft.VisualStudio.TestTools.DataSource.CSV"</span>, <span class="str">"|DataDirectory|TestData.csv"</span>, <span class="str">"TestData#csv"</span>, DataAccessMethod.Sequential), TestMethod]</pre><pre><span class="kwrd">public</span> <span class="kwrd">void</span> Add_when_two_numbers_returns_proper_result()</pre><pre class="alt">{</pre><pre><span class="rem">//arrange</span></pre><pre class="alt">var operand1 = System.Convert.ToInt32(TestContext.DataRow[<span class="str">"Operand1"</span>]);</pre><pre>var operand2 = System.Convert.ToInt32(TestContext.DataRow[<span class="str">"Operand2"</span>]);</pre><pre class="alt"></pre><pre>var sut = <span class="kwrd">new</span> Calculator();</pre><pre class="alt"> </pre><pre><span class="rem">//act</span></pre><pre class="alt">var result = sut.Add(operand1, operand2);</pre><pre> </pre><pre class="alt"><span class="rem">//assert</span></pre><pre>var expectedValue = System.Convert.ToInt32(TestContext.DataRow[<span class="str">"ExpectedValue"</span>]);</pre><pre class="alt"></pre><pre>Assert.AreEqual(expectedValue, result);</pre><pre class="alt">}</pre></div><br />.csharpcode, .csharpcode pre { font-size: small; color: black; font-family: consolas, "Courier New", courier, monospace; background-color: #ffffff; /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { background-color: #f4f4f4; width: 100%; margin: 0em; } .csharpcode .lnum { color: #606060; } <br /><br />7.  Run the Test<br /><br />You can run the test as you would any other in MS Test.  The result will look similar to other tests.<br /><br /><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-3nFWkrI/AAAAAAAAA0s/18Wy09qAbVE/s1600-h/image%5B53%5D.png"><img alt="image" border="0" height="128" src="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-3y-dB4I/AAAAAAAAA00/MeZgM-V9xss/image_thumb%5B31%5D.png?imgmax=800" title="image" width="380" /></a><br /><br />However, if you right-click on the result row in the Test Results pane, and select View Test Results Details as shown below…<br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-4ZmlLHI/AAAAAAAAA04/Q0OADe9ZlyA/s1600-h/image%5B57%5D.png"><img alt="image" border="0" height="242" src="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-4iyUv9I/AAAAAAAAA08/tAwOtIcCkKQ/image_thumb%5B33%5D.png?imgmax=800" title="image" width="356" /></a><br /><br /><br /><br /><br />…you will see the detail of the results to see which data combinations failed and why.<br /><br /><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/TVT-4zuDzDI/AAAAAAAAA1A/E-62RPHM_sc/s1600-h/image%5B62%5D.png"><img alt="image" border="0" height="238" src="http://lh5.ggpht.com/_3gdMjuMkpX4/TVT-5LvQ2II/AAAAAAAAA1E/PBHZDsuYhAU/image_thumb%5B36%5D.png?imgmax=800" title="image" width="397" /></a><br /><br />Hope this helps someone else out there.<br /><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2011-02-11 09:18:00</wp:post_date>
  <wp:post_date_gmt>2011-02-11 09:18:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-data-driven-tests-in-ms-test</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[4638440554595826736]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715846]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2013-04-09 09:41:07</wp:comment_date>
    <wp:comment_date_gmt>2013-04-09 09:41:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very helpful. Thanks!!!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Create Custom Test Category Attributes in Visual Studio</title>
  <link>https://toddmeinershagen.wordpress.com/?p=25</link>
  <pubDate>Fri, 01 Oct 2010 03:35:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2010/10/01/create-custom-test-category-attributes-in-visual-studio</guid>
  <description/>
  <content:encoded><![CDATA[In the past, for each class library project we create in Visual Studio, we have maintained separate unit test and integration test projects.  This has allowed us to easily configure continuous integration with TFS to run a given project’s unit tests on check-in and run the full suite of unit and integration tests on a nightly build.<br />With the introduction of Visual Studio 2010, build types now can filter tests based on test categories. <br /><br />For example, I can categorize a given test as a unit test by doing the following:<br /><br />        <span style="font-family:COnsolas;">[TestClass]     <br />    public class Test      <br />    {      <br />        [TestMethod]      <br />        [TestCategory("UnitTest")]      <br />        public void IsValid_returns_false_when_quantity_large()      <br />        {      <br />        }      <br />    }</span><br /><span style="font-family:COnsolas;"><br /></span><br />This allows us to consolidate all tests into one project and distinguish by categories.  The only issue is that these categories are based on strings that the developer must type, and this can create inconsistencies using magic strings which may not be noticed during the course of development.<br /><br />In order to get around this, another option is to create your own custom test category attributes that return the proper string.  Microsoft has provided a base class, TestCategoryBaseAttribute for this very purpose.<br /><br />         <span style="font-family:Consolas;">public class UnitTestAttribute : TestCategoryBaseAttribute     <br />    {      <br />        public UnitTestAttribute()      <br />        {} </span><br /><span style="font-family:Consolas;">        public override IList TestCategories     <br />        {      <br />            get { return new List {"UnitTest"}; }      <br />        }      <br />    }</span><br /><br />By overriding the TestCategories property, you can return the appropriate string(s) that represent this classification.  In this case, we are returning the same string that the previous test category provided.<br /><br />In order to use this attribute, you merely need to add it to a given test method like so.<br /><br />        <span style="font-family:Consolas;">[TestClass]     <br />    public class Test      <br />    {      <br />        [TestMethod]      <br />        [UnitTest]      <br />        public void IsValid_returns_false_when_quantity_large()      <br />        {      <br />        }      <br />    }</span><br /><br />With this kind of flexibility, if you had a limited list of attributes that you wanted to provide to developers, you could also create an enum type and pass that into the constructor of the custom test category attribute.  <br /><br />Just create an enum type.<br /><br />         <span style="font-family:Consolas;">public enum Category : int     <br />    {      <br />        UnitTest = 0,      <br />        IntegrationTest = 1      <br />    }</span><br /><br />Then, create the attribute using the enum as a constructor parameter.<br /><br />         <span style="font-family:Consolas;">public class TestCategoryAttribute </span><span style="font-family:Consolas;">: TestCategoryBaseAttribute     <br />    {      <br />        private TestCategory _category; </span><br /><span style="font-family:Consolas;">        </span><br /><span style="font-family:Consolas;">        public TestCategoryAttribute(TestCategory category)     <br />        {      <br />            _category = category;      <br />        } </span><br /><span style="font-family:Consolas;">        </span><br /><span style="font-family:Consolas;">        public override IList TestCategories     <br />        {      <br />            get      <br />            {      <br />                var value = Enum.GetName(typeof (TestCategory), _category);      <br />                return new List{ value };      <br />            }      <br />        }      <br />    }</span><br /><span style="font-family:Consolas;"><br /></span><br />To use the new attribute, you would do the following.<br /><br />        <span style="font-family:Consolas;">[TestClass]     <br />    public class Test      <br />    {      <br />        [TestMethod]      <br />        [TestCategory(Category.UnitTest)]      <br />        public void IsValid_returns_false_when_quantity_large()      <br />        {      <br />        }      <br />    }</span><br /><br />Hope this helps!<br /><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2010-10-01 03:35:00</wp:post_date>
  <wp:post_date_gmt>2010-10-01 03:35:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>create-custom-test-category-attributes-in-visual-studio</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6158494910193984410]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715884]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Alex]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/14585641729051092302</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2011-04-13 13:01:46</wp:comment_date>
    <wp:comment_date_gmt>2011-04-13 13:01:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good stuff, looks strangely familiar!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-06-07 09:32:35</wp:comment_date>
    <wp:comment_date_gmt>2012-06-07 09:32:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[how to get the string inside [TestCategory(Category.UnitTest)] <br /><br />I want the string <b>"Category.UnitTest" </b>from the Test category. How will I extract it? Please help . Thank you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Todd Meinershagen]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/15973461415802595901</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-06-07 15:33:02</wp:comment_date>
    <wp:comment_date_gmt>2012-06-07 15:33:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can you provide more information on why you need the string?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[Tamas Szijarto]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/13560802980116955441</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-11-27 11:47:56</wp:comment_date>
    <wp:comment_date_gmt>2012-11-27 11:47:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you create your own TestCategory class, how can you run your test in vstest.console.exe? What TestCaseFilter do you use?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Todd Meinershagen]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/15973461415802595901</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2012-11-27 13:45:53</wp:comment_date>
    <wp:comment_date_gmt>2012-11-27 13:45:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for your question.  When you create your custom category, you have to override the TestCategories property indicating what string or strings you want to return for that category. When you filter, you specify this value in the TestCaseFilter.  <br /><br />If you use a set of enum values as specified in the second example, the test category would return the string value of that enum when the test runner interrogates the TestCategories property.  So, if you create an attribute such as [TestCategoryColor(Color.Red)] instead of [TestCategoryColor(Color.Blue)], for example, the TestCaseFilter would be "Red".  (This is a ridiculous categorization, but it makes my point.)<br /><br />I hope that helps.  If not, let me know.<br /><br />Thanks...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Six Interview Questions for Agile Teams</title>
  <link>https://toddmeinershagen.wordpress.com/?p=26</link>
  <pubDate>Tue, 24 Aug 2010 03:21:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2010/08/24/six-interview-questions-for-agile-teams</guid>
  <description/>
  <content:encoded><![CDATA[I was reading through my blogs tonight and came across <a href="http://www.stickyminds.com/sitewide.asp?Function=edetail&amp;ObjectType=COL&amp;ObjectId=16277&amp;tth=DYN&amp;tt=siteemail&amp;iDyn=2" target="_blank">one</a> that did a nice job of explaining the qualities that an agile team member should possess.  In addition, the writer included a good behavioral interview question for each.<br />I briefly share each below, but I highly recommend reading the <a href="http://www.stickyminds.com/sitewide.asp?Function=edetail&amp;ObjectType=COL&amp;ObjectId=16277&amp;tth=DYN&amp;tt=siteemail&amp;iDyn=2" target="_blank">original article</a>.<br />1. <u>People Who Collaborate</u><br /><em>"Think back to a recent project. Give me an example of a time you had to work with other people to make sure that you could finish something. What happened?"</em> <br />2. <u>People Who Ask for Help</u><br /><em>"Think back to your most recent project. Tell me about a time you did not understand something. What did you do?" </em><br />3. <u>People Who are Willing to Take Small Steps and Get Feedback</u><br /><em>"When you work on your projects outside of work, how do you work?"</em> <br />4. <u>People Who are Willing To Do Something That is Good Enough for Now</u><br /><em>"Tell me about a recent time you did not know everything at the beginning of the project. What did you do?"</em> <br />5. <u>Adaptable People</u><br /><em>"Tell me about a time when you did not have the conditions you would've liked for your project. What did you do?"</em> <br />6. <u>People Willing to Work Outside Their Expertise</u><br /><em>"Tell me about a time you took on work to help the team. What was that like?"</em> <br />So, tell me dear Reader – what questions do you ask when interviewing candidates for an agile-oriented team?<br /><br /><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2010-08-24 03:21:00</wp:post_date>
  <wp:post_date_gmt>2010-08-24 03:21:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>six-interview-questions-for-agile-teams</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3386561240904177631]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715915]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Motivations</title>
  <link>https://toddmeinershagen.wordpress.com/?p=27</link>
  <pubDate>Sat, 29 May 2010 12:30:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2010/05/29/motivations</guid>
  <description/>
  <content:encoded><![CDATA[I found this <a href="http://lifehacker.com/5550373/the-surprising-realities-behind-what-motivates-us-in-illustrated-form">video</a> about what motivates people to be very refreshing.  Basically, if the tasks that people are working on require more than a basic physical action, money rewards don't motivate, but rather demotivate people.  What really motivates others to perform well at conceptual tasks are three things:  autonomy, self mastery, and purpose.  What I find is that Agile practices tend to foster or work within these motivations.  <div><br /></div><div>For example, user stories really help to zero in on the purpose for a given feature request.  "As a [actor], I can [do something], so that I can [accomplish a goal]."  Developers really get a sense for why they are building a piece of functionality rather than just focusing on building a method, etc.  And the prioritization of these stories helps to clarify what is truly important within a sprint.</div><div><br /></div><div>As well, agile practices promote mastery by emphasizing continual improvement.  Teams are encouraged to use the processes that work for an individual team rather than trying to create a process that will work for an entire organization.  Other principles such as refactoring and unit testing also suggest an intense focus on continually improving the code base.</div><div><br /></div><div>And finally, the scrum meeting and agile planning in general focus on the team working together on deciding the priorities rather than having a central authority such as a PM do that.  Individuals make themselves accountable to the team by explaining what they accomplished yesterday and what they plan to accomplish for the current day.  This creates a sense of autonomy in those performing the work.</div><div><br /></div><div>I would be interested to hear your thoughts on the video as well as whether or not you agree that agile practices help to foster these motivations. </div><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2010-05-29 12:30:00</wp:post_date>
  <wp:post_date_gmt>2010-05-29 12:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>motivations</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5519102175730917081]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715941]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[Ben Floyd]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2010-08-09 06:02:02</wp:comment_date>
    <wp:comment_date_gmt>2010-08-09 06:02:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I saw the video about two months ago and completely agree that agile practices foster the individual motivations discussed.<br /><br />I actually came to the conclusion that many of the twelve principles in the Agile Manifesto directly address individual and team motivation issues related to autonomy, self-mastery, and purpose. Therefore, they were designed specifically to utilize these motivations as a way of increasing the probability that a project will succeed. I think individual and team motivation problems have always been very high risk for methodologies like waterfall, and the agile principles were created out of frustration with the previous inability to address those problems.<br /><br />Therefore, I would like to rearrange your question like this: Do you agree or disagree that agile practices have been successful at utilizing motivation as a way to mitigate the risks to a project&#39;s success that can be attributed to loss of individual and team motivation?<br /><br />Hopefully that made sense. I ended up rewriting it a few times (more on that later).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[Todd Meinershagen]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/12725148793575134734</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2010-08-24 03:02:35</wp:comment_date>
    <wp:comment_date_gmt>2010-08-24 03:02:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for your feedback.  <br /><br />I do like your rearrangement of my original question - it is more insightful, sort of like a user story.  Not only does it ask the question of whether or not agile principles are effective at motivating people (the "I can"), but it also gets at the goal (the "so that I can") which is to mitigate the risks that are associated with a project full of unmotivated/uncommitted individuals.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Rick Warren Speaks on Meet the Press - Giving</title>
  <link>https://toddmeinershagen.wordpress.com/?p=28</link>
  <pubDate>Sun, 29 Nov 2009 21:47:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/11/29/rick-warren-speaks-on-meet-the-press-giving</guid>
  <description/>
  <content:encoded><![CDATA[I really enjoyed seeing Rick Warren, the pastor of Saddleback Church in California, speak on giving on Meet the Press with David Gregory.  (below)<div><br /></div><div>And what influence he has - not just because he has a platform on national television, but because he actually gives 90% of his income.  He has the authority to speak on this subject!<br /><br /><div><a href="http://www.msnbc.msn.com/id/22425001/vp/34193069#34193069">http://www.msnbc.msn.com/id/22425001/vp/34193069#34193069</a><p style="font-size:11px;font-family:Arial, Helvetica, sans-serif;color:#999;margin-top:5px;background:transparent;text-align:center;width:425px;">Visit msnbc.com for <a style="text-decoration:none !important;border-bottom:1px dotted #999 !important;font-weight:normal !important;height:13px;color:#5799DB !important;" href="http://www.msnbc.msn.com/">Breaking News</a>, <a href="http://www.msnbc.msn.com/id/3032507" style="text-decoration:none !important;border-bottom:1px dotted #999 !important;font-weight:normal !important;height:13px;color:#5799DB !important;">World News</a>, and <a href="http://www.msnbc.msn.com/id/3032072" style="text-decoration:none !important;border-bottom:1px dotted #999 !important;font-weight:normal !important;height:13px;color:#5799DB !important;">News about the Economy</a></p></div></div><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2009-11-29 21:47:00</wp:post_date>
  <wp:post_date_gmt>2009-11-29 21:47:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rick-warren-speaks-on-meet-the-press-giving</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[893449685542060548]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181715978]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Static Code Analysis - Part 2</title>
  <link>https://toddmeinershagen.wordpress.com/?p=29</link>
  <pubDate>Sat, 05 Sep 2009 07:54:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/09/05/static-code-analysis-part-2</guid>
  <description/>
  <content:encoded><![CDATA[<p>In my last post, I showed how you could enable static code analysis for a visual studio project.  However, you can also set up static code analysis at a more global level if you are using Team Foundation Server for source code control.</p>  <p>Within a Team Project, you can set up a check-in policy that requires the code to pass static code analysis.  You can do this by simply right-clicking on the Team Project and selecting Source Control from the Team Project Settings.</p>  <p><a href="http://lh4.ggpht.com/_3gdMjuMkpX4/SqIZNW0UXWI/AAAAAAAAAmI/XzARg-NQ7Q0/image%5B3%5D.png"><img height="232" alt="image" src="http://lh3.ggpht.com/_3gdMjuMkpX4/SqIZNhxKznI/AAAAAAAAAmM/H0BLv7TKq1I/image_thumb%5B1%5D.png" width="370" border="0" /></a></p>  <p>From the Source Control Settings dialog, click on the Check-In Policy tab. and click the Add... button.  (Note - I already have the Code Analysis policy set for my project in the image below.)</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SqIZNy0T5bI/AAAAAAAAAmQ/Qrj9KtnOxkQ/image%5B7%5D.png"><img height="167" alt="image" src="http://lh5.ggpht.com/_3gdMjuMkpX4/SqIZOSj9_JI/AAAAAAAAAmU/1UBK7rL6ke0/image_thumb%5B3%5D.png" width="395" border="0" /></a>  </p>  <p>Click the Add... button to add a new check-in policy and select Code Analysis from the menu.</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SqIZOvSsQaI/AAAAAAAAAmY/ktC3xVC_o0A/image%5B11%5D.png"><img height="228" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SqIZOxVkH-I/AAAAAAAAAmc/cdpbrXsopDs/image_thumb%5B5%5D.png" width="334" border="0" /></a> </p>  <p>From here, you should be able set up the rules just as you would at the project level.  Any rules you specify should generate an error when violated, and therefore, the code will not compile.  As a result, the developers will not be able to check-in code that violates any of the rules that you have set for the team.</p>  <p><a href="http://lh4.ggpht.com/_3gdMjuMkpX4/SqIZPcIQktI/AAAAAAAAAmg/jUugWSfxMIU/image%5B15%5D.png"><img height="352" alt="image" src="http://lh5.ggpht.com/_3gdMjuMkpX4/SqIZPv40z3I/AAAAAAAAAmk/JocvvpOkzR8/image_thumb%5B7%5D.png" width="308" border="0" /></a> </p>  <p>So, if you have already set up rules within your projects, another nice feature in Visual Studio is the ability to synch up your settings in each project with those set at the check-in policy level.  You can do this by selecting the Replace with Check-in Policy under Analyze/Code Analysis Settings for Solution in Visual Studio.</p>  <p><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/SqIZQOpfkeI/AAAAAAAAAmo/KmCglaxjHe0/image%5B19%5D.png"><img height="167" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SqIZQqyd5lI/AAAAAAAAAms/9Bdog0L82FU/image_thumb%5B9%5D.png" width="370" border="0" /></a> </p>  <p>All of the settings in your current projects will match those set at the Team Project level.  None of your previous suppressions attributes should have been removed.</p>  <p>Hope this helps!</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2009-09-05 07:54:00</wp:post_date>
  <wp:post_date_gmt>2009-09-05 07:54:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>static-code-analysis-part-2</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3626720855270519703]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716011]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Static Code Analysis - Part 1</title>
  <link>https://toddmeinershagen.wordpress.com/?p=30</link>
  <pubDate>Sat, 05 Sep 2009 07:22:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/09/05/static-code-analysis-part-1</guid>
  <description/>
  <content:encoded><![CDATA[<p>The static code analysis within Visual Studio is a great way of automating initial code review.  In order to turn it on do the following.</p>  <p>1.  Go to Properties within the particular project.</p>  <p>Code analysis can only be enabled at the project level, so the first step is to go to your properties section of each project you want enabled for code analysis.</p>  <p>2.  Go to the Code Analysis tab.</p>  <p>3.  At the top, check the box that "Enable Code Analysis on Build..."</p>  <p>4.  On the right-hand side of the screen, check the box for those rules that you want treated as an error.  (By default it is treated as a warning and will not stop the build process.)</p>  <p><a href="http://lh4.ggpht.com/_3gdMjuMkpX4/SqIRxDkZilI/AAAAAAAAAl4/PiJvgFwRJHU/image%5B9%5D.png"><img height="137" alt="image" src="http://lh5.ggpht.com/_3gdMjuMkpX4/SqIRxf4lfBI/AAAAAAAAAl8/CvP9kj--zmg/image_thumb%5B5%5D.png" width="464" border="0" /></a> </p>  <p>Sometimes the rules may not make sense for projects where a lot of code is auto-generated.  In this case, you could leave that rule as a warning in the project settings.  </p>  <p>In other cases, you may want to suppress the errors for particular members of your types or for whole namespaces.  This can be done by right-clicking on the rule violation in the Error List that appears when compiling your project and selecting a Suppress Message option.</p>  <p><a href="http://lh4.ggpht.com/_3gdMjuMkpX4/SqIRxz6OWRI/AAAAAAAAAmA/DpvHLcCOoOo/image%5B5%5D.png"><img height="237" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SqIRySX-ryI/AAAAAAAAAmE/vI8gQLZXIxM/image_thumb%5B3%5D.png" width="452" border="0" /></a></p>  <p>As seen above, this can either be set within your source or in a project suppression file.  You can learn more about this <a href="http://blogs.msdn.com/fxcop/archive/2006/12/28/FAQ-What-is-the-GlobalSuppressions.cs-GlobalSuppressions.vb-file-and-why-is-it-needed-Is-it-possible-to-change-the-name-of-this-file-David-Kean.aspx">here</a>. </p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2009-09-05 07:22:00</wp:post_date>
  <wp:post_date_gmt>2009-09-05 07:22:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>static-code-analysis-part-1</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5119370089627714787]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716039]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JSON Serialization in .NET</title>
  <link>https://toddmeinershagen.wordpress.com/?p=31</link>
  <pubDate>Fri, 17 Apr 2009 17:12:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/04/17/json-serialization-in-net</guid>
  <description/>
  <content:encoded><![CDATA[<p>Many of you may be familiar with the use of JSON (JavaScript Object Notation).  It is a very tight syntax for expressing the state of an object and is very widely used in Web 2.0/AJAX style development in which objects are passed back and forth between the client using the XmlHttpRequest object out of band to eliminate the need to do a full page refresh.</p>  <p>I found a great article by Rick Strahl that outlines the pros/cons of two built-in .NET serializers:  JavaScriptSerializer and DataContractJsonSerializer.  You can read about them <a href="http://west-wind.net/Weblog/ShowPost.aspx?id=442969" target="_blank">here</a>.</p>  <p>After using both methods in my own application, I found that another con of the JavaScriptSerializer that is a pro for the DataContractJsonSerializer class is that it requires a public default, parameter-less constructor.  This means that I cannot serialize objects that I also would like to make read-only, and therefore, requires a constructor with the properties defined up front.</p>  <p>One point I wanted to make in this post was that the extension class that Rick defines in his post for simplifying DataContractJsonSerializer usage does not work properly.  In order to correct it, I added the 'this' keyword to the first parameter so that .NET recognized the static methods as extensions to the object type.  In addition, I converted the FromJsonString() method to a generic FromJsonString() method to allow the return object to be strongly typed.  </p>  <p>Code is listed below, if you are interested.</p> <a href="http://lh3.ggpht.com/_3gdMjuMkpX4/Sei4_iG8_8I/AAAAAAAAAio/aR2w9YY3VZ4/image%5B12%5D.png"><img alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/Sei5AKv5p2I/AAAAAAAAAis/-hHQ4bY55IM/image_thumb%5B10%5D.png" border="0" height="441" width="473" /></a><div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2009-04-17 17:12:00</wp:post_date>
  <wp:post_date_gmt>2009-04-17 17:12:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>json-serialization-in-net</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.net]]></category>
  <category domain="category" nicename="json"><![CDATA[json]]></category>
  <category domain="category" nicename="serialization"><![CDATA[serialization]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8164876788885792768]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716073]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2009-04-26 01:45:00</wp:comment_date>
    <wp:comment_date_gmt>2009-04-26 01:45:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Todd, I transcribe cencus reports for the LDS Church - and found your surname, which is MOST unusual... so, here&#39;s the info: Jackson County, Missouri, Jan. 1920 federal census, sheet #13, page letter "A", family number 300:<br />E.G. MEINERSHAGEN, HEAD OF HOUSEHOLD,OWNED HIS HOME, WHITE MALE, AGE 31years, MARRIED, BORN IN MISSOURI, AS WERE HIS MOTHER & FATHER,WAS A FLOOR MANAGER. HIS WIFE,IDA, WHITE FEMALE, AGE 28years, BORN IN MISSOURI, AS WERE HER PARENTS. AT THAT POINT THEY HAD ONE CHILD, AGE 6months, BORN IN MISSOURI. THE WRITING ISN&#39;T CLEAR, BUT IT APPEARS TO BE A DAUGHTER, HER NAME IS FOUR LETTERS AND APPEARS TO BE A ROUND LETTER LIKE "O" OR "D", FOLLOWED BY, MAYBE... ERN   ??DERN...FERN???<br /><br />JUST THOUGHT THEY MIGHT BE RELATED...<br /><br />DONNA]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Changing the Default Browser in Visual Studio 2008 with ASP.NET MVC</title>
  <link>https://toddmeinershagen.wordpress.com/?p=32</link>
  <pubDate>Thu, 16 Apr 2009 02:18:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/04/16/changing-the-default-browser-in-visual-studio-2008-with-asp-net-mvc</guid>
  <description/>
  <content:encoded><![CDATA[<p>How frustrating!  I spent at least 15 minutes trying to figure out how to change the default browser for debugging to my preferred browser in Visual Studio 2008.  </p>  <p>Apparently, with a normal ASP.NET application, you can just right-click on any .aspx file and select 'Browse With...' from the context menu.  The dialog that opens (shown below) has the option to select a browser and click 'Set as Default' button.</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SeaVXsUkqnI/AAAAAAAAAig/CdXGJd4w3H0/image%5B4%5D.png"><img height="270" alt="image" src="http://lh3.ggpht.com/_3gdMjuMkpX4/SeaVY5fBmDI/AAAAAAAAAik/ihY5xT51jGU/image_thumb%5B2%5D.png" width="344" border="0" /></a> </p>  <p>Unfortunately, the .aspx files in ASP.NET MVC applications don't don't provide this option in the context menu.  The only one that works is the Default.aspx file.  </p>  <p>I found the answer from this helpful blog <a href="http://www.geeksandgurus.com/blogs/sjb/2009/03/how-to-change-default-browser-in-visual.html" target="_blank">post</a>.  Thank you, Steve Bodnar!  </p>  <p>My recommendation to Microsoft is to either put this setting in the Tools/Options menu, which seems to be the most natural place to look for this setting, or place it in the Properties of the Web Site/Application project - which might be even better if you want to specify this setting per project.</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2009-04-16 02:18:00</wp:post_date>
  <wp:post_date_gmt>2009-04-16 02:18:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>changing-the-default-browser-in-visual-studio-2008-with-asp-net-mvc</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[9009076083603941081]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716107]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url/>
    <wp:comment_author_IP/>
    <wp:comment_date>2009-11-22 21:17:27</wp:comment_date>
    <wp:comment_date_gmt>2009-11-22 21:17:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This comment has been removed by a blog administrator.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Transparency is a Core Value in Work/Life</title>
  <link>https://toddmeinershagen.wordpress.com/?p=33</link>
  <pubDate>Thu, 12 Mar 2009 00:36:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/03/12/transparency-is-a-core-value-in-worklife</guid>
  <description/>
  <content:encoded><![CDATA[<p>I am working on a current project where we are trying to create a site that gives visibility/transparency into our company and its performance whether good or bad.  This is being done in order to build relationship with those we do business with.  And it occurred to me how fundamental transparency really is in work and life.  </p>  <p>Lately, I have noticed a lot of examples of people and processes that are geared to pursuing transparency.  Regardless of what I think of President Obama's policies, I have to say that he has been fairly transparent with his decisions and agenda.  And every time some corruption (financial industry, legislative pork) or misbehavior is mentioned, his solution tends to be creating some framework (site or process) for exposing those ills through transparency.</p>  <p>It also occurred to me that a lot of project management processes aid us in exposing the truth about projects.  Risk management helps to expose potential issues that can ruin a project's timeline or budget.  Issues lists keep track of potential flaws in a given system.  And project post-mortems can help teams to learn from past mistakes and improve for future iterations.  </p>  <p>Even rating systems within eBay and Amazon or content updates from Facebook can help to bring a level of transparency that build trust.</p>  <p>So, why should transparency be so important?  </p>  <p>For one, transparency <em><strong>builds trust</strong>.  </em>If someone knows the truth about me, whether good or bad, they can begin to expect certain behaviors from me.  They can trust that I am who I say I am, and there is no fear that I will change or that there is something they do not know about me.</p>  <p>All relationships grow from a root of trust.  Without it, there is no basis for relationship.  So, if I want to grow quality relationships with my family, friends, and colleagues, I have to nurture trust, and therefore transparency.</p>  <p>It also creates a level of <strong><em>accountability</em></strong>.  If I am transparent about my life and work to myself and others, I am forced to face reality.  And even though reality is not always pretty, it can allow me to choose to pursue change.  Without it, I can safely live in denial and be complacent with the way things are.  And worse, if I keep things a secret, those failures may grow worse.  It was once said, "You are only as sick as your secrets." </p>  <p>The Bible concurs with these benefits saying that, </p>  <p><em>"If we say we have fellowship with him while we walk in darkness, we lie and do not practice the truth. 7 But if we walk in the light, as he is in the light, we have fellowship with one another, and the blood of Jesus his Son cleanses us from all sin."</em>  (1 John 1:6-7)</p>  <p>You cannot have fellowship (relationship) with others and grow in your life without a level of transparency.</p>  <p>So, I have decided that <strong>transparency</strong> or <strong>being transparent</strong> needs to be a core value for me.  And this blog post is my first attempt at admitting that I need to work on it.  I need to be willing to be honest to others about my life and work regardless of the consequences and be humble enough to apologize when I have failed or hurt someone.  It's the only way to have the quality relationships and integrity I desire.</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2009-03-12 00:36:00</wp:post_date>
  <wp:post_date_gmt>2009-03-12 00:36:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>transparency-is-a-core-value-in-worklife</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[915021363145235661]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716129]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[LD]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.blogger.com/profile/14414717411256330314</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2009-11-09 20:25:34</wp:comment_date>
    <wp:comment_date_gmt>2009-11-09 20:25:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Todd, just stopping by your blog to check out your latest works/thoughts. :) <br /><br />Connie]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Web Service Naming Conventions</title>
  <link>https://toddmeinershagen.wordpress.com/?p=34</link>
  <pubDate>Tue, 03 Mar 2009 16:04:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/03/03/web-service-naming-conventions</guid>
  <description/>
  <content:encoded><![CDATA[<p>I was reviewing an interface for a WCF web service today, and I began wondering about web service naming conventions.</p>  <p>It is understood that a service should be a logical grouping of a set of functionality.  Therefore, if you have several pieces of functionality that center around a Project concept, then you should group them together under the name ProjectService.  </p>  <p>So, the convention for service names is:</p>  <ul>   <li><strong>Casing:</strong>      Pascal case</li>    <li><strong>Format:</strong>     [concept noun] + 'Service' to construct the name.) </li>    <li><strong>Examples:</strong>  ProjectService, TaskService, PersonService, etc.</li> </ul>  <p>When creating methods for a data service, though, should you restate the concept in the title?  In this case, you would use the following methods:  CreateProject(), UpdateProject(), GetProjectByID().  Isn't this already understood by the title of the web service?  So that you could say Create(), Update(), and GetByID() instead.  </p>  <p>I propose no.</p>  <p>The latter might make more sense in an object-oriented world where you are operating on the object itself.  However, a service is more like a manager class that operates on Project objects.  Also, theoretically speaking, each one of these functions can live on their own apart from any other functionality.  So, specifying the concept in the title of each method would make sense.  And finally, there might be functionality in this service for sub-objects such as Task that would not be substantial/independent enough to live on its own in a TaskService. </p>  <p>In that case, it would be important to understand which type of object your Create(), Update(), and GetByID() are operating on.</p>  <p>So, my recommendation for a data web service methods is:</p>  <ol>   <li><strong>Casing:</strong>      Pascal case</li>    <li><strong>Format:</strong>     [operation] + [concept noun] + [optional extensions]</li>    <li><strong>Examples: </strong> CreateProject(), UpdateProject(), GetProjectByID()</li> </ol>  <p>What are your thoughts?  </p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2009-03-03 16:04:00</wp:post_date>
  <wp:post_date_gmt>2009-03-03 16:04:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>web-service-naming-conventions</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[208776789005623976]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716169]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Team Foundation Server - Identifying All File Changes</title>
  <link>https://toddmeinershagen.wordpress.com/?p=35</link>
  <pubDate>Tue, 27 Jan 2009 17:49:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/01/27/team-foundation-server-identifying-all-file-changes</guid>
  <description/>
  <content:encoded><![CDATA[<p>Within <strong>Visual Studio 2008</strong>, it is very easy to view the Team Foundation Server history of either a given file, project, or solution.  All you have to do is right-click on the particular item, select <strong>View History</strong> from the context menu, and you are presented with a list of changesets as shown below.</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SX9JLExJHsI/AAAAAAAAAb4/lO7vkmDyKJU/image%5B9%5D.png"><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/SX9JLZLtTFI/AAAAAAAAAb8/hlEfczH5j68/image%5B11%5D.png"><img height="273" alt="image" src="http://lh5.ggpht.com/_3gdMjuMkpX4/SX9JLwl2y4I/AAAAAAAAAcA/RacnuPvfgb8/image_thumb%5B7%5D.png" width="164" align="left" border="0" /></a><img height="207" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SX9JMDxu6SI/AAAAAAAAAcE/PFPqwjqT6K4/image_thumb%5B5%5D.png" width="285" border="0" /></a> </p>  <p> </p>  <p> </p>  <p>From there you can double-click on a given changeset and see the files that were a part of that atomic check-in.</p>  <p>But how do you see a consolidated list of all files that have been modified since a particular date, label, or changeset?  That is a little less intuitive.</p>  <p>The first step is to open the <strong>Source Control Explorer</strong> from the <strong>Team Explorer</strong> client window of <strong>Visual Studio</strong> by double-clicking on the <strong>Source Control Explorer</strong> node in the tree as shown below.</p>  <p><a href="http://lh6.ggpht.com/_3gdMjuMkpX4/SX9JMEFiQlI/AAAAAAAAAcI/tndXVUV6jYo/image%5B17%5D.png"><img height="180" alt="image" src="http://lh4.ggpht.com/_3gdMjuMkpX4/SX9JM_olLcI/AAAAAAAAAcM/HPGH6JEa_Po/image_thumb%5B11%5D.png" width="155" border="0" /></a> </p>  <p>From the <strong>Source Control Explorer</strong> window, select the node within the project (either Team Project, Solution, Project, or file) and right-click to select <strong>Compare</strong>.</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SX9JNF-RPaI/AAAAAAAAAcQ/nabUXTIjlYs/image%5B21%5D.png"><img height="229" alt="image" src="http://lh4.ggpht.com/_3gdMjuMkpX4/SX9JNVEfkhI/AAAAAAAAAcU/of_cENfAco0/image_thumb%5B13%5D.png" width="205" border="0" /></a> </p>  <p>From there you will be presented with the <strong>Compare</strong> dialog shown below.</p>  <p><a href="http://lh5.ggpht.com/_3gdMjuMkpX4/SX9JNsUH9lI/AAAAAAAAAcY/COTZw_oRcEE/image%5B24%5D.png"><img height="217" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SX9JNwfLfRI/AAAAAAAAAcc/rgraRW92z9g/image_thumb%5B14%5D.png" width="244" border="0" /></a> </p>  <p>You can select to compare to a <strong>Changeset, Date, Label</strong>, etc. from the list.  For purposes of this article, we have selected the compare by <strong>Date</strong>.  Make sure that the only <strong>View Option</strong> selected in the checkboxes at the end of the dialog is "Show files that are different."  Once you click the <strong>OK</strong> button, you will be presented with the following window displaying all of the files that have changed, grouped by solution and project.</p>  <p><a href="http://lh3.ggpht.com/_3gdMjuMkpX4/SX9JOM_LfmI/AAAAAAAAAcg/KjCLXqIdYkE/image%5B30%5D.png"><img height="155" alt="image" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SX9JOd75j-I/AAAAAAAAAck/4XBIcV142Ww/image_thumb%5B18%5D.png" width="466" border="0" /></a> </p>  <p>Hope this helps.</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2009-01-27 17:49:00</wp:post_date>
  <wp:post_date_gmt>2009-01-27 17:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>team-foundation-server-identifying-all-file-changes</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="tfs"><![CDATA[TFS]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3218187146748444359]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181716196]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Effective Executive - Part 1</title>
  <link>https://toddmeinershagen.wordpress.com/?p=36</link>
  <pubDate>Sun, 11 Jan 2009 23:45:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/01/11/the-effective-executive-part-1</guid>
  <description/>
  <content:encoded><![CDATA[<p align="left"><a href="http://www.amazon.com/Effective-Executive-Definitive-Harperbusiness-Essentials/dp/0060833459/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1231717386&amp;sr=8-1" target="_blank"><img height="188" src="http://ecx.images-amazon.com/images/I/51B7G1SKB0L._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg" width="188" align="right" /></a> So, I picked up a copy (used, by the way, from Amazon Marketplace for only $0.56 + shipping/handling) of <a href="http://www.amazon.com/Effective-Executive-Definitive-Harperbusiness-Essentials/dp/0060833459/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1231717386&amp;sr=8-1" target="_blank">The Effective Executive</a> by Peter Drucker.  It is by no means a new book, being released in 1966, but it has some very valuable wisdom on how to effectively execute as a knowledge worker that is as relevant today as it was then.</p>  <p>I am going to write several posts on the book, because I want to remember the important points from the book, and I would also like to share the most interesting portions with you.  This first post will be a quick intro to the book.</p>  <p>The book is a mere 174 pages, but it takes time to read and digest the content.  The first chapter discusses the need for effectiveness and idea that effectiveness can be learned by anyone.  </p>  <p>What is effectiveness you say?  Well, Drucker makes the distinction of doing the right things rather than do things the right way.  Too many are busy doing work with no clue as to what contribution that work is really making to the organization.</p>  <p>After establishing the fact that effectiveness is important to knowledge workers and that effectiveness can be learned, the author then launches into 6 chapters explaining the most important aspects of practicing the habit of being effective.</p>  <p>1.  Know where the time goes.</p>  <p>2.  Focus on outward contribution.</p>  <p>3.  Build on strengths - individual, peer, superior and subordinate.</p>  <p>4.  Concentrate on a few major areas to achieve results.</p>  <p>5.  Make effective decisions. </p>  <p>I have not read all of the chapters, but just skimming the book has provided invaluable insights into becoming effective.  I will try to discuss each of the aspects above in future posts. </p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2009-01-11 23:45:00</wp:post_date>
  <wp:post_date_gmt>2009-01-11 23:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-effective-executive-part-1</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8734853643059560585]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718418]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Random Resolution for the New Year 2009</title>
  <link>https://toddmeinershagen.wordpress.com/?p=37</link>
  <pubDate>Thu, 08 Jan 2009 22:48:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2009/01/08/random-resolution-for-the-new-year-2009-2</guid>
  <description/>
  <content:encoded><![CDATA[<p>Well, it's that time of year again when we make New Year's resolutions.  I am not a big fan of doing this once a year, because I believe that we should be daily looking for ways to grow and help others.</p>  <p>However, I found out about a site that randomly chooses a resolution for you from Caleb Jenkin's <a href="http://calebjenkins.com/">blog</a> post <a href="http://developingux.com/2009/01/07/resolution-randomizer/">today</a>.  It sounded simple enough.  So, here's what it came up with for me.</p>  <p><a href="http://resolutionrandomizer.pop.us/ecard.aspx"><img height="382" alt="resolution_randomizer_2009_toddmeinershagen" src="http://lh6.ggpht.com/_3gdMjuMkpX4/SWaCw5_c-EI/AAAAAAAAAZ0/78KT-qL3bKI/resolution_randomizer_2009_toddmeinershagen%5B6%5D.jpg" width="455" border="0" /></a></p>  <p>Pretty appropriate, no?  Try it out by clicking <a href="http://resolutionrandomizer.pop.us/ecard.aspx">here</a>. </p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2009-01-08 22:48:00</wp:post_date>
  <wp:post_date_gmt>2009-01-08 22:48:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>random-resolution-for-the-new-year-2009-2</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6125584710539662321]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718450]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Turning on Intellisense with Visual Studio 2008</title>
  <link>https://toddmeinershagen.wordpress.com/?p=39</link>
  <pubDate>Thu, 17 Jul 2008 12:23:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2008/07/17/turning-on-intellisense-with-visual-studio-2008</guid>
  <description/>
  <content:encoded><![CDATA[<p>For whatever reason, when I was using Visual Studio 2008 this morning, I noticed that intellisense was not working.  Whenever I typed the period at the end of an object reference, no list of available methods and their associated parameters was made visible as a drop-down.  </p>  <p>I know that I am "man" enough to work without it, but I have come to really enjoy the productivity I get using intellisense - especially when learning a new API.</p>  <p>So, after exploring a bit, I found the settings and am documenting it here, so I don't forget for future reference.</p>  <p>1.  Click on Tools/Options in the upper-menu.</p>  <p><a href="http://lh6.ggpht.com/todd.alan.meinershagen/SH850m-Y__I/AAAAAAAAAGs/HSCkCCsEpUc/image9.png"><img height="344" alt="image" src="http://lh3.ggpht.com/todd.alan.meinershagen/SH851Jmz9DI/AAAAAAAAAGw/AHdmmEV-X8c/image_thumb5.png" width="202" border="0" /></a> </p>  <p>2.  Under Text Editor/All Languages navigate to the Statement Completion section at the top of the dialog and check the appropriate settings</p>  <p><a href="http://lh5.ggpht.com/todd.alan.meinershagen/SH852YCsGyI/AAAAAAAAAG0/-645WJqA-F4/image8.png"><img height="296" alt="image" src="http://lh3.ggpht.com/todd.alan.meinershagen/SH853Ja7JyI/AAAAAAAAAG4/E7t_n-TcXMc/image_thumb4.png" width="471" border="0" /></a> </p>  <p>There are 3 settings with the following explanation:</p>  <ul>   <li>Auto list members - this is essential for intellisense to begin working. </li>    <li>Hide Advanced members - this will allow you to hide those properties, methods, and events that are not often used. </li>    <li>Parameter information - by default the auto list members only displays the name of the property, event, or method.  You must have this option checked in order to display the actual parameter information. </li> </ul>  <p>I hope this was helpful...</p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2008-07-17 12:23:00</wp:post_date>
  <wp:post_date_gmt>2008-07-17 12:23:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>turning-on-intellisense-with-visual-studio-2008</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[302725152693215697]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718644]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Alessio's In Westlake Village, CA</title>
  <link>https://toddmeinershagen.wordpress.com/?p=40</link>
  <pubDate>Sun, 16 Dec 2007 17:40:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2007/12/16/alessios-in-westlake-village-ca</guid>
  <description/>
  <content:encoded><![CDATA[<p>Tonight my manager and I are going to eat at Alessio's in Westlake Village, CA with a representative from IBM.  I just wanted to add this post as a reminder of the restaurant location.  I'm sure it will be very nice!</p>  <p>I have placed a map of the directions from the Simi Valley office of Countrywide (2900 Madera Road) to the restaurant below for future reference.</p>  <p></p>  <p>[googlemaps https://maps.google.com/maps?f=d&amp;hl=en&amp;geocode=18039757214202201069,34.164031,-118.828507&amp;time=&amp;date=&amp;ttype=&amp;saddr=2900+Madera+Road,+Simi+Valley,+CA&amp;daddr=3731+E+Thousand+Oaks+Blvd,+Westlake+Village,+CA+91362&amp;mra=pi&amp;mrcr=0&amp;sll=34.164031,-118.828507&amp;sspn=0.007493,0.016909&amp;ie=UTF8&amp;om=1&amp;ll=34.225005,-118.82652&amp;spn=0.13727,0.07712&amp;output=embed&amp;s=AARTsJpBm7yXVmLy4PduERGiFUhBuXKPuQ" frameborder="0" width="425" scrolling="no" height="350"&gt;    <br /><small><a style="color:#0000ff;text-align:left;" href="http://maps.google.com/maps?f=d&amp;hl=en&amp;geocode=18039757214202201069,34.164031,-118.828507&amp;time=&amp;date=&amp;ttype=&amp;saddr=2900+Madera+Road,+Simi+Valley,+CA&amp;daddr=3731+E+Thousand+Oaks+Blvd,+Westlake+Village,+CA+91362&amp;mra=pi&amp;mrcr=0&amp;sll=34.164031,-118.828507&amp;sspn=0.007493,0.016909&amp;ie=UTF8&amp;om=1&amp;ll=34.225005,-118.82652&amp;spn=0.13727,0.07712&amp;source=embed">View Larger Map</a></small> </p>  <p>Below is the actual location for the restaurant close up. </p>  <p>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2007-12-16 17:40:00</wp:post_date>
  <wp:post_date_gmt>2007-12-16 17:40:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>alessios-in-westlake-village-ca</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6742129648970139149]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718668]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Rianne]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://kansascityinsurance.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2008-11-11 10:11:00</wp:comment_date>
    <wp:comment_date_gmt>2008-11-11 10:11:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting to know.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Google for App Domains - Family Site</title>
  <link>https://toddmeinershagen.wordpress.com/?p=41</link>
  <pubDate>Mon, 16 Jul 2007 03:14:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2007/07/16/google-for-app-domains-family-site</guid>
  <description/>
  <content:encoded><![CDATA[<span class="gmail_quote"></span>My family and I are contemplating shutting down our existing family site at <a href="http://www.meinershagen.net/community" target="_blank"> http://www.<span id="st" class="st">meinershagen</span>.net/community</a> and actually setting up shop with Google for App Domains.  I am so blown away with the services that Google is offering for free (email, calendar, photos, pages, groups, blogs, docs, etc.) that I can&#039;t justify paying to host my own site anymore. <br><br>Have any of you had experience yet using the Google for App Domains?  If so, what are some of the gotchas that you ran into when starting to use the service?  Thanks in advance for any tips you have...<br> <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2007-07-16 03:14:00</wp:post_date>
  <wp:post_date_gmt>2007-07-16 03:14:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>google-for-app-domains-family-site</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1251813982810771196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718689]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>New SiteAvailabilityHttpModule - Based on Client IP Address</title>
  <link>https://toddmeinershagen.wordpress.com/?p=42</link>
  <pubDate>Thu, 31 May 2007 04:30:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2007/05/31/new-siteavailabilityhttpmodule-based-on-client-ip-address-2</guid>
  <description/>
  <content:encoded><![CDATA[<div class="Section1">   <p class="MsoNormal">As part of my company’s Technical Council, we are working on defining our process for promoting code from one environment to the next.  One of the items we wanted to standardize across our enterprise was how we stop a site during a promotion.  </p>    <p class="MsoNormal">ASP.NET 2.0 has a nice feature for shutting down a site called App Offline.  As Scott Guthrie from Microsoft puts it, “the way [App Offline] works is that you place this file in the root of the application.  When ASP.NET sees it, it will shut-down the app-domain for the application (and not restart it for requests) and instead send back the contents of the app_offline.htm file in response to all new dynamic requests for the application.  When you are done updating the site, just delete the file and it will come back online.”  You can find more out about this technique from the original blog entry <a href="http://weblogs.asp.net/scottgu/archive/2006/04/09/442332.aspx">here</a>.</p>    <p class="MsoNormal">Unfortunately, our requirements were a bit more complicated than was intended with the app_offline.htm.  First, most of our applications were written with the 1.1 framework, so this built-in functionality was not available for our use.  In addition, we wanted the ability for testers to be able to validate the site once the changes had been made.  However, we didn’t want to have to bring the site back up in order to do that.</p>    <p class="MsoNormal">As I was looking on line, I found another option called the <a href="http://www.jameskovacs.com/blog/InDepthLookAtTheSiteAvailabilityModule.aspx">SiteAvailabilityHttpModule</a>.  This module allowed for the site to be shut down by merely configuring an HttpModule within the web.config.  In the Init() event, the module subscribes to the PostAuthorizeRequest event.  Within the event handler, the system determines whether or not the request occurred during an accepted time frame and whether or not the requesting user belonged to the administrator role.  </p>    <p class="MsoNormal">We didn’t need either of those features for our deployment.  Instead of using a role-based mechanism for determining a user’s access, we wanted to base access on a configured list of client IP addresses.  As a result, we didn’t need to wait until the PostAuthorizeRequest event – we could check these aspects within the first event – BeginRequest instead.  The code is listed below. </p>    <p class="MsoNormal"><span style="font-size:10pt;color:blue;font-family:consolas;"></span></p>    <p class="MsoNormal"><span style="font-size:10pt;color:blue;font-family:consolas;">void</span><span style="font-size:10pt;font-family:consolas;"> context_BeginRequest(<span style="color:blue;">object</span> sender, EventArgs e)</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"></span><span style="font-size:10pt;font-family:consolas;">{</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"><span style="color:blue;"><font color="#000000">     </font>string</span> ext = Path.GetExtension(HttpContext.Current.Request.Path).ToLower();</span><span style="font-size:10pt;font-family:consolas;">              </span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">     </span><span style="font-size:10pt;font-family:consolas;"><span style="color:blue;">if</span>(ext == ".aspx") </span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">     </span><span style="font-size:10pt;font-family:consolas;">{</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">          <span style="color:blue;">if</span> (<span style="color:blue;">this</span>.IsEnabled)</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">          {</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">               <span style="color:blue;">if</span> (!IsClientIPValid())</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">               {</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">                    HttpContext.Current.RewritePath("~/SiteUnavailable.htm");</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">               }</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">          }</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">     }</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;">}</span></p>    <p class="MsoNormal"><span style="font-size:10pt;font-family:consolas;"></span></p>    <p class="MsoNormal">Notice that you must place a SiteUnavailable.htm file at the root of the site in order to display content if the user’s client IP address does not match one that is configured in the web.config.  You can find the current release for this component <a href="http://meinershagen.net/community/files/folders/files_ewh_releases/entry155.aspx">here</a>.</p> </div>  <div class="blogger-post-footer"><div>
<br />
<span style="border-top:solid 1px #000000;">
<span style="text-align:left;">
Todd Meinershagen is a Principal Consultant with </span><a href="http://www.improvingenterprises.com/" style="text-align:left;">Improving Enterprises</a><span style="text-align:left;"> in Dallas, Texas.</span>
</span>
<br />
</div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2007-05-31 04:30:00</wp:post_date>
  <wp:post_date_gmt>2007-05-31 04:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-siteavailabilityhttpmodule-based-on-client-ip-address-2</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3943235495353658183]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11181718719]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Decision to Reject a Counter Offer</title>
  <link>https://toddmeinershagen.wordpress.com/?p=43</link>
  <pubDate>Wed, 30 May 2007 22:36:01 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2007/05/31/decision-to-reject-a-counter-offer-2</guid>
  <description/>
  <content:encoded><![CDATA[So – I have decided to leave my company of 4 ½ years. It was a difficult decision, as any decision is to leave your company is. I really have enjoyed working with the various teams that I have been involved with. The main driving force was a greater need to connect with people locally. I currently work out of a remote office in Dallas, with the rest of my team being in Chicago, but I enjoy the atmosphere of working with a local team and being able to informally discuss issues and connect at a more personal level.

The problem – I submit my resignation, and within a day, I receive a counter offer. I won’t go into the specifics of what they offered me, but suffice it to say that I began to wonder if it wouldn’t be worth my while to stay for another year or two.

I write this post to explain to others and remind myself of why I decided to stick with my decision to leave my current employer.

1 - It’s all a mirage.

The offer from my current employer only really existed the moment that I put my resignation in. Therefore, it’s really just an illusion. I can’t rationalize or try to get myself to believe that these two options were going to exist at the time of my initial decision. It was flattering, though.

2 - Potential Problems

I did all of the online research I could to see if accepting a counter offer was legitimate. Most information that I gathered suggested that it would not be a good idea, because 99% of the time the employee is gone within 6-12 months either because the original issue was not addressed by the counter offer or the employer replaced the person since they were disloyal. And most posts mentioned that it was an unethical move.

3 - Integrity is at issue.

The moment that I began to entertain accepting the counter offer, I began to feel wrong inside. Although I agreed with all of the information I found online, that wasn’t what was really eating at me. I felt that I was wronging the company that I had said, “yes,” to. They would have to start their search all over again. That didn’t feel right. I couldn’t face myself in the mirror if I felt that I had done something to hurt someone.

4 - Spiritual

And finally, as I lay in bed at night, I found myself crying out to God to give me wisdom. I wanted to make sure that whatever I chose to do, it was what the Lord thought was right. And at 2:00 am in the morning, the day before I rejected the counter offer, a verse came to my mind that I had not read for over 6 months: “Who swears to his own hurt, and does not change…” This is part of a larger passage of scripture in Psalms chapter 15, where King David asks “O Lord, who shall sojourn in your tent? Who shall dwell on your holy hill?” And the list that follows explains the qualities of one who can fellowship with the Lord. And keeping promises must be high on His list.

I couldn’t deny the voice of God. Accepting a counter offer was wrong not only because it isn’t real, it might potentially cause me harm, and it might damage my reputation with others. It might also cause harm to my neighbor – or in this case, my future employer. I couldn’t do that with a good conscience. It would keep me from fellowshipping with the One whom I don’t want to miss out on.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2007-05-30 22:36:01</wp:post_date>
  <wp:post_date_gmt>2007-05-30 22:36:01</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>decision-to-reject-a-counter-offer-2</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="career"><![CDATA[career]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[2905361155465381336]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28105367955]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>5297b-screenshot2011-12-26at2-24-49pm</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=45#main</link>
  <pubDate>Sun, 31 May 2015 04:08:58 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/5297b-screenshot2011-12-26at2-24-49pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2015-05-31 04:08:58</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:08:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5297b-screenshot2011-12-26at2-24-49pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/5297b-screenshot2011-12-26at2-24-49pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-PRKOl9vQD7w/TvjYNKibLuI/AAAAAAAAAB8/NNQ_JlliI7Q/s1600/Screen+Shot+2011-12-26+at+2.24.49+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Free Services Online</title>
  <link>https://toddmeinershagen.wordpress.com/?p=47</link>
  <pubDate>Fri, 08 Sep 2006 17:38:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/2006/09/08/free-services-online</guid>
  <description/>
  <content:encoded><![CDATA[<img src="https://cloud.githubusercontent.com/assets/20459187/19576706/a4894d54-96d9-11e6-8bb2-aced94d49b0d.png" alt="google-apps" />

I am amazed at the amount of free services being provided on the internet! Will there be a day when I no longer have to maintain my own file share on a local hard drive? Will I be able to store everything out in the "cloud"?

Google has capitalized the market with free services like email, chat, calendaring, and photo albums. They are even offering to let you use their services as a suite for free within your small organization under <a href="http://www.google.com/a">your own domain</a>.  Microsoft and others are trying to catch up with the services bandwagon, but clearly Google is in the lead.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2006-09-08 17:38:00</wp:post_date>
  <wp:post_date_gmt>2006-09-08 17:38:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>free-services-online</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[toddmeinershagen.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[Todd Meinershagen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_afd108f81ae242501ffa65d49d9298e0_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6679807752631721029]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_stag-post-cache</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:10:"char-count";i:103;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28045961127]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>4960e-screenshot2011-12-26at2-26-43pm</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=48#main</link>
  <pubDate>Sun, 31 May 2015 04:08:59 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/4960e-screenshot2011-12-26at2-26-43pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2015-05-31 04:08:59</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:08:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>4960e-screenshot2011-12-26at2-26-43pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/4960e-screenshot2011-12-26at2-26-43pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-Ti1IQuZlWHQ/TvjYmxnwvxI/AAAAAAAAACI/a-1AtmJniTM/s1600/Screen+Shot+2011-12-26+at+2.26.43+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Gists for Code Snippets</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=49#main</link>
  <pubDate>Sun, 31 May 2015 04:08:59 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-24-49pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2015-05-31 04:08:59</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:08:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-gists-for-code-snippets-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-24-49pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-PRKOl9vQD7w/TvjYNKibLuI/AAAAAAAAAB8/NNQ_JlliI7Q/Screen+Shot+2011-12-26+at+2.24.49+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Gists for Code Snippets</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=50#main</link>
  <pubDate>Sun, 31 May 2015 04:08:59 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-43pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2015-05-31 04:08:59</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:08:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-gists-for-code-snippets-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-43pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-Ti1IQuZlWHQ/TvjYmxnwvxI/AAAAAAAAACI/a-1AtmJniTM/Screen+Shot+2011-12-26+at+2.26.43+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6daa3-screenshot2011-12-26at2-26-23pm</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=51#main</link>
  <pubDate>Sun, 31 May 2015 04:08:59 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/6daa3-screenshot2011-12-26at2-26-23pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2015-05-31 04:08:59</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:08:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6daa3-screenshot2011-12-26at2-26-23pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/6daa3-screenshot2011-12-26at2-26-23pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-dbyAlfyIkbI/TvjZoTpr6gI/AAAAAAAAACU/3d8jFBBqpWI/s1600/Screen+Shot+2011-12-26+at+2.26.23+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Gists for Code Snippets</title>
  <link>https://toddmeinershagen.wordpress.com/?attachment_id=52#main</link>
  <pubDate>Sun, 31 May 2015 04:09:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">http://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-23pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2015-05-31 04:09:00</wp:post_date>
  <wp:post_date_gmt>2015-05-31 04:09:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-gists-for-code-snippets-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>23</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://toddmeinershagen.files.wordpress.com/2011/12/screenshot2011-12-26at2-26-23pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-dbyAlfyIkbI/TvjZoTpr6gI/AAAAAAAAACU/3d8jFBBqpWI/Screen+Shot+2011-12-26+at+2.26.23+PM.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Welcome to Todd's Thoughts</title>
  <link>https://toddmeinershagen.wordpress.com/?p=102</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/?p=102</guid>
  <description/>
  <content:encoded><![CDATA[Hi - welcome to my new <a href="https://toddmeinershagen.wordpress.com">site</a>!

<img src="http://lifestylefrisco.com/wp-content/uploads/2016/05/tammy-meinershagen-300x300.jpg" alt="Tammy Meinershagen" />

You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&amp;lt;your blog URL&amp;gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!

<h2>Getting Started</h2>

Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!

Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:

<ul>
<li>Item number one</li>
<li>Item number two</li>
<li>A nested item</li>
<li>A final item</li>
</ul>

or with numbers!

<ol>
<li>Remember to buy some milk</li>
<li>Drink the milk</li>
<li>Tweet that I remembered to buy the milk, and drank it</li>
</ol>

<h3>Links</h3>

Want to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href="http://ghost.org">the Ghost website</a>. Neat.

<h3>What about Images?</h3>

Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:

<img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo" />

Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:

![A bowl of bananas]

<h3>Quoting</h3>

Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!

<blockquote>
  Ghost - Just a blogging platform
</blockquote>

<h3>Working with Code</h3>

Got a streak of geek? We've got you covered there, too. You can write inline <code>&amp;lt;code&amp;gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.

[code lang=css]
.awesome-thing {
  display: block;
  width: 100%;
}
[/code]

<h3>Ready for a Break?</h3>

Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.

<hr />

<h3>Advanced Usage</h3>

There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.

&lt;input type="text" placeholder="I'm an input field!" /&gt;

That should be enough to get you started. Have fun - and let us know what you think :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2016-11-08 02:51:31</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2295558]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Live Unit Testing in Visual Studio 2017</title>
  <link>https://toddmeinershagen.wordpress.com/2017/03/10/live-unit-testing-in-visual-studio-2017/</link>
  <pubDate>Fri, 10 Mar 2017 18:13:30 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/?p=146</guid>
  <description/>
  <content:encoded><![CDATA[I am a big proponent of unit testing my code because of the many benefits it provides:

<ul>
<li>Helps me to catch potential bugs early</li>
<li>Helps me to clarify the behavior of my units (classes) from a client perspective</li>
<li>Leaves a documentation trail for those that come behind me to understand my intentions</li>
</ul>

The only irritation/friction I have found in the past is the fact that running unit tests has required me to manually run them on a periodic basis. Having keyboard shortcuts has helped to make that fairly painless, but it would have been nice to have the tests automatically run as I am working on the code. That way I am continually receiving feedback and don't have to explicitly do anything to receive it.

While there have been custom add-on options in the past (<a href="https://github.com/amirrajan/SpecWatchr">SpecWatchr</a> and <a href="http://www.ncrunch.net/">nCrunch</a>), Microsoft has finally seen fit to add this functionality right into the Visual Studio 2017 Enterprise version.

Find out more about it <a href="https://blogs.msdn.microsoft.com/visualstudio/2017/03/09/live-unit-testing-in-visual-studio-2017-enterprise/">here</a> on Microsoft's Visual Studio Blog.

<img src="https://cloud.githubusercontent.com/assets/177508/23807073/e6a6a618-0589-11e7-851e-8a96c230c9ec.png" alt="Live Unit Test Screenshot" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>146</wp:post_id>
  <wp:post_date>2017-03-10 18:13:30</wp:post_date>
  <wp:post_date_gmt>2017-03-10 18:13:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>live-unit-testing-in-visual-studio-2017</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2723480454]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Test Post</title>
  <link>https://toddmeinershagen.wordpress.com/2018/02/14/__trashed/</link>
  <pubDate>Wed, 14 Feb 2018 07:13:33 +0000</pubDate>
  <dc:creator>tmeinershagen</dc:creator>
  <guid isPermaLink="false">https://toddmeinershagen.wordpress.com/?p=154</guid>
  <description/>
  <content:encoded><![CDATA[You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

[code lang=csharp]
public class Person
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }

    public void Say(string message)
    {
        Console.WriteLine(message);
    }
}
[/code]

Check out the [Jekyll docs][http://docs.jekyll.com] for more info on how to get the most out of Jekyll.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>154</wp:post_id>
  <wp:post_date>2018-02-14 01:13:33</wp:post_date>
  <wp:post_date_gmt>2018-02-14 07:13:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>__trashed</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_desired_post_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
